import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "posts/跨域及常见解决办法.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/跨域及常见解决办法.html",
    'title': "跨域及常见解决方法",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>跨域及常见解决方法</h1>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F">什么是跨域<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>\n<p>广义的跨域：</p>\n<ol>\n<li>资源跳转：A链接、重定向、表单提交</li>\n<li>资源嵌入：<code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签，还有样式中background:url()、@font-face()等文件外链</li>\n<li>脚本请求：js发起的ajax请求、dom和js对象的跨域操作等</li>\n</ol>\n<p>其实我们通常所说的跨域是狭义的，是由<strong>浏览器同源策略限制</strong>的一类请求场景。</p>\n<p><strong>什么是同源策略？</strong></p>\n<p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指&quot;协议+域名+端口&quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n<p>同源策略限制以下几种行为：</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM 和 Js对象无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ol>\n<h2 id="%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E5%9C%BA%E6%99%AF">常见跨域场景<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E5%9C%BA%E6%99%AF">§</a></h2>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/b.js">http://www.domain.com/b.js</a></td>\n<td>同一域名，不同文件或路径</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain.con/lab/c.js">http://www.domain.con/lab/c.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com:8000/a.js">http://www.domain.com:8000/a.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/b.js">http://www.domain.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="https://www.domain.com/b.js">https://www.domain.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td>域名和域名对应相同ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://192.168.1.1/b.js">http://192.168.1.1/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://x.domain.com/b.js">http://x.domain.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://domain.com/c.js">http://domain.com/c.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain1.com/a.js">http://www.domain1.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain2.com/b.js">http://www.domain2.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">跨域解决方案<a class="anchor" href="#%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">§</a></h2>\n<ol>\n<li>通过<code>jsonp</code>跨域</li>\n<li><code>document.domain + iframe</code>跨域</li>\n<li><code>location.hash + iframe</code>跨域</li>\n<li><code>window.name + iframe</code>跨域</li>\n<li><code>postMessage</code>跨域</li>\n<li>跨域资源共享(<code>CORS</code>)</li>\n<li><code>nginx</code>代理跨域</li>\n<li><code>nodejs</code>中间件代理跨域</li>\n<li><code>WebSocket</code>协议跨域</li>\n</ol>\n<h2 id="1%E9%80%9A%E8%BF%87jsonp%E8%B7%A8%E5%9F%9F">1.通过jsonp跨域<a class="anchor" href="#1%E9%80%9A%E8%BF%87jsonp%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>\n<ol>\n<li>原生实现</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> script <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">\'script\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    script<span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token string">\'text/javascript\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>\n    script<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback\'">http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback\'</a></span><span class="token punctuation">;</span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span><span class="token punctuation">.</span><span class="token method function property-access">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 回调执行函数</span>\n    <span class="token keyword">function</span> <span class="token function">handleCallBack</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>服务端返回如下（返回时即执行全局函数）：</p>\n<pre class="language-js"><code class="language-js"><span class="token function">handleCallBack</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"status"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ol start="2">\n<li>jQuery ajax</li>\n</ol>\n<pre class="language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    dataType<span class="token operator">:</span> <span class="token string">\'jsonp\'</span><span class="token punctuation">,</span> <span class="token comment">// 请求方式为jsonp</span>\n    jsonpCallback<span class="token operator">:</span> \'handleCallBack"<span class="token punctuation">,</span> <span class="token comment">// 自定义回调函数名</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ol start="3">\n<li>vue.js</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$http</span><span class="token punctuation">.</span><span class="token method function property-access">jsonp</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    jsonp<span class="token operator">:</span> <span class="token string">\'handleCallBack\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre>\n<ol start="4">\n<li>后端node.js代码示例</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\'?\'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fn <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// jsonp返回设置</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/javascript"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>fn <span class="token operator">+</span> <span class="token string">\'(\'</span> <span class="token operator">+</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>jsonp缺点：只能实现GET请求。</strong></p>\n<h2 id="2documentdomain--iframe%E8%B7%A8%E5%9F%9F">2.document.domain + iframe跨域<a class="anchor" href="#2documentdomain--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p><strong>此方案仅限主域相同，子域不同的跨域应用场景。</strong></p>\n<p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>\n<p>1）父窗口(<a href="http://www.domain.com/a.html">http://www.domain.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://child.domain.com/b.html">http://child.domain.com/b.html</a>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>scirpt<span class="token operator">></span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">domain</span> <span class="token operator">=</span> <span class="token string">\'domain.com\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">\'amin\'</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>scirpt<span class="token operator">></span>\n</code></pre>\n<p>2）子窗口(<a href="http://child.domain.com/b.html">http://child.domain.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">domain</span> <span class="token operator">=</span> <span class="token string">\'domain.com\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取父窗口中的变量</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'get js data from parent-->\'</span> <span class="token operator">+</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token property-access">user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="3locationhash--iframe%E8%B7%A8%E5%9F%9F">3.location.hash + iframe跨域<a class="anchor" href="#3locationhash--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>\n<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 向b.html传hash值</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">+</span> <span class="token string">\'#user=admin\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 开放给同域c.html的回调方法</span>\n    <span class="token keyword">function</span> <span class="token function">onCallback</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from c.html --->\'</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 监听a.html传来的hash值，再传给c.html</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">+</span> <span class="token dom variable">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>3）c.html(<a href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token comment">// 监听b.html传来的hash值</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 再通过操作同域a.html的js回调，将结果放回</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token method function property-access">onCallback</span><span class="token punctuation">(</span><span class="token string">\'hello; \'</span> <span class="token operator">+</span> <span class="token dom variable">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">\'#user=\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="4windowname--iframe%E8%B7%A8%E5%9F%9F"><a href="http://4.window.name">4.window.name</a> + iframe跨域<a class="anchor" href="#4windowname--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">proxy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加载跨域页面</span>\n    iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n    <span class="token comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span>\n    iframe<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 第2次onload（同域proxy页）成功后，读取同域window.name中数据</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">destoryFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n            <span class="token comment">// 第1次onload（跨域页）成功后，切换到同域代理页面</span>\n            iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">location</span> <span class="token operator">=</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>\'</span><span class="token punctuation">;</span>\n            state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span>\n    <span class="token keyword">function</span> <span class="token function">destoryFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">document</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token method function property-access">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 请求跨域b页面数据</span>\n<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）proxy.html(<a href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>)</p>\n<p>中间代理页，与a.html同域，内容为空即可。</p>\n<p>3）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'This is domain2 data!\'</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="5postmessage%E8%B7%A8%E5%9F%9F">5.postMessage跨域<a class="anchor" href="#5postmessage%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>\n<ol>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ol>\n<p>用法：</p>\n<p><code>postMessage(data, origin)</code>方法接受两个参数</p>\n<p>data：html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</p>\n<p>origin：协议+主机+端口号，也可以设置为&quot;*&quot;，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为&quot;/&quot;。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">const</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    iframe<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'aym\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 向domain2传送跨域数据</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com">http://www.domain2.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 接收domain2返回数据</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from domain2 --->\'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token comment">// 接收domain1的数据</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from domain1 ---> \'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            data<span class="token punctuation">.</span><span class="token property-access">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n            <span class="token comment">// 处理后再发回domain1</span>\n            <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="6%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors">6.跨域资源共享（CORS）<a class="anchor" href="#6%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors">§</a></h2>\n<p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p>\n<p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p>\n<p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p>\n<p><strong>前端设置</strong></p>\n<p>1）原生ajax</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 前端设置是否带cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre>\n<p>示例代码</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IE8/9需用window.XDomainRequest兼容</span>\n\n<span class="token comment">// 前端设置是否带cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'post\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">,</span> <span class="token string">\'application/x-www-form-urlencoded\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token string">\'user=admin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nxhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">readyStaet</span> <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>2）jQuery ajax</p>\n<pre class="language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token spread operator">...</span>\n    xhrFields<span class="token operator">:</span> <span class="token punctuation">{</span>\n        withCredentials<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 前端设置是否带cookie</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 会让请求头中包含跨域的额外信息，但不会包含cookie</span>\n    <span class="token spread operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>3）vue框架</p>\n<ul>\n<li>axios设置</li>\n</ul>\n<pre class="language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token property-access">defaults</span><span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre>\n<ul>\n<li>vue-resource设置</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">http</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">credentials</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre>\n<p><strong>服务端设置</strong></p>\n<p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p>\n<p>1）Java后台</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">/*\n * 导入包：import javax.servlet.http.HttpServletResponse;\n * 接口参数中定义：HttpServletResponse response\n */</span>\n\n<span class="token comment">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加\'/\'</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 允许前端带认证cookie：启用此项后，上面的域名不能为\'*\'，必须指定具体的域名，否则浏览器会提示</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type,X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）Nodejs后台示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 数据块接收中</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据接收完毕</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 跨域后台设置</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token operator">:</span> <span class="token string">\'true\'</span><span class="token punctuation">,</span> <span class="token comment">// 后端允许发送cookie</span>\n            <span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">,</span> <span class="token comment">// 允许访问的域（协议+域名+端口）</span>\n            <span class="token comment">/* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */</span>\n            <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>  <span class="token comment">// HttpOnly的作用是让js无法读取cookie</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserve<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="7nginx%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">7.nginx代理跨域<a class="anchor" href="#7nginx%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p><strong>1、 nginx配置解决iconfont跨域</strong></p>\n<p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>\n<pre class="language-js"><code class="language-js"><span class="token dom variable">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n  add_header <span class="token maybe-class-name">Access</span><span class="token operator">-</span><span class="token maybe-class-name">Control</span><span class="token operator">-</span><span class="token maybe-class-name">Allow</span><span class="token operator">-</span><span class="token maybe-class-name">Origin</span> <span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、 nginx反向代理接口跨域</strong></p>\n<p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p>\n<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>\n<p>nginx具体配置：</p>\n<pre class="language-python"><code class="language-python"><span class="token comment">#proxy服务器</span>\nserver <span class="token punctuation">{</span>\n    listen       <span class="token number">81</span><span class="token punctuation">;</span>\n    server_name  www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>\n\n    location <span class="token operator">/</span> <span class="token punctuation">{</span>\n        proxy_pass   http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>  <span class="token comment">#反向代理</span>\n        proxy_cookie_domain www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token comment">#修改cookie里域名</span>\n        index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>\n\n        <span class="token comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span>\n        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment">#当前端只跨域不带cookie时，可为*</span>\n        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Credentials true<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>1）前端代码示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 前端开关：浏览器是否读写cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 访问nginx中的代理服务器</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'get\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com:81/?user=admin\'">http://www.domain1.com:81/?user=admin\'</a></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）Nodejs后台示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">.</span><span class="token method function property-access">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 向前台写cookie</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>   <span class="token comment">// HttpOnly:脚本无法读取</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="8nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">8.Nodejs中间件代理跨域<a class="anchor" href="#8nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p>\n<p><strong>1、 非vue框架的跨域（2次跨域）</strong></p>\n<p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p>\n<p>1）前端代码示例：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 前端开关：浏览器是否读写cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 访问http-proxy-middleware代理服务器</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'get\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com:3000/login?user=admin\'">http://www.domain1.com:3000/login?user=admin\'</a></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>2）中间件服务器：</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http-proxy-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 代理跨域目标接口</span>\n    target<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">,</span>\n    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 修改响应头信息，实现跨域并允许带cookie</span>\n    <span class="token function-variable function">onProxyRes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">proxyRes<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">header</span><span class="token punctuation">(</span><span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">header</span><span class="token punctuation">(</span><span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token punctuation">,</span> <span class="token string">\'true\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 修改响应信息中的cookie域名</span>\n    cookieDomainRewrite<span class="token operator">:</span> <span class="token string">\'www.domain1.com\'</span>  <span class="token comment">// 可以为false，表示不修改</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Proxy server is listen at port 3000...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>3）Nodejs后台</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> postData <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据块接收中</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据接收完毕</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 跨域后台设置</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token operator">:</span> <span class="token string">\'true\'</span><span class="token punctuation">,</span>     <span class="token comment">// 后端允许发送Cookie</span>\n            <span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">,</span>    <span class="token comment">// 允许访问的域（协议+域名+端口）</span>\n            <span class="token comment">/* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */</span>\n            <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>  <span class="token comment">// HttpOnly的作用是让js无法读取cookie</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>2、 vue框架的跨域（1次跨域）</strong></p>\n<p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<p>webpack.config.js部分配置：</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token spread operator">...</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        historyApiFallback<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        proxy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            context<span class="token operator">:</span> <span class="token string">\'/login\'</span><span class="token punctuation">,</span>\n            target<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">,</span>  <span class="token comment">// 代理跨域目标接口</span>\n            changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 当代理某些https服务报错时用</span>\n            cookieDomainRewrite<span class="token operator">:</span> <span class="token string">\'www.domain1.com\'</span>  <span class="token comment">// 可以为false，表示不修改</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        noInfo<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="9-websocket%E5%8D%8F%E8%AE%AE%E8%B7%A8%E5%9F%9F">9. WebSocket协议跨域<a class="anchor" href="#9-websocket%E5%8D%8F%E8%AE%AE%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p>\n<p>原生WebSocket API使用起来不太方便，<a href="http://xn--Socket-hz8ig3bo82im51b.io">我们使用Socket.io</a>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>\n<p>1）前端代码</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>user input：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js">https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js</a>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 连接成功处理</span>\nsocket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'connect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 监听服务端消息</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'data from server: ---> \'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 监听服务端关闭</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'disconnect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server socket has closed.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）Nodejs socket后台</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'socket.io\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启http服务</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token string">\'Content-type\'</span><span class="token operator">:</span> <span class="token string">\'text/html\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 监听socket连接</span>\nsocket<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'connection\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 接收信息</span>\n    client<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        client<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token string">\'hello：\'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'data from client: ---> \'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 断开处理</span>\n    client<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'disconnect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Client socket has closed.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>'
        } }),
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u8DE8\u57DF\u53CA\u5E38\u89C1\u89E3\u51B3\u65B9\u6CD5"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F">什么是跨域<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>\n<p>广义的跨域：</p>\n<ol>\n<li>资源跳转：A链接、重定向、表单提交</li>\n<li>资源嵌入：<code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签，还有样式中background:url()、@font-face()等文件外链</li>\n<li>脚本请求：js发起的ajax请求、dom和js对象的跨域操作等</li>\n</ol>\n<p>其实我们通常所说的跨域是狭义的，是由<strong>浏览器同源策略限制</strong>的一类请求场景。</p>\n<p><strong>什么是同源策略？</strong></p>\n<p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指&quot;协议+域名+端口&quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n<p>同源策略限制以下几种行为：</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM 和 Js对象无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ol>\n<h2 id="%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E5%9C%BA%E6%99%AF">常见跨域场景<a class="anchor" href="#%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E5%9C%BA%E6%99%AF">§</a></h2>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/b.js">http://www.domain.com/b.js</a></td>\n<td>同一域名，不同文件或路径</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain.con/lab/c.js">http://www.domain.con/lab/c.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com:8000/a.js">http://www.domain.com:8000/a.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/b.js">http://www.domain.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="https://www.domain.com/b.js">https://www.domain.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td>域名和域名对应相同ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://192.168.1.1/b.js">http://192.168.1.1/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain.com/a.js">http://www.domain.com/a.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://x.domain.com/b.js">http://x.domain.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://domain.com/c.js">http://domain.com/c.js</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href="http://www.domain1.com/a.js">http://www.domain1.com/a.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href="http://www.domain2.com/b.js">http://www.domain2.com/b.js</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">跨域解决方案<a class="anchor" href="#%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">§</a></h2>\n<ol>\n<li>通过<code>jsonp</code>跨域</li>\n<li><code>document.domain + iframe</code>跨域</li>\n<li><code>location.hash + iframe</code>跨域</li>\n<li><code>window.name + iframe</code>跨域</li>\n<li><code>postMessage</code>跨域</li>\n<li>跨域资源共享(<code>CORS</code>)</li>\n<li><code>nginx</code>代理跨域</li>\n<li><code>nodejs</code>中间件代理跨域</li>\n<li><code>WebSocket</code>协议跨域</li>\n</ol>\n<h2 id="1%E9%80%9A%E8%BF%87jsonp%E8%B7%A8%E5%9F%9F">1.通过jsonp跨域<a class="anchor" href="#1%E9%80%9A%E8%BF%87jsonp%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>\n<ol>\n<li>原生实现</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> script <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">\'script\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    script<span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token string">\'text/javascript\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>\n    script<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback\'">http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback\'</a></span><span class="token punctuation">;</span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span><span class="token punctuation">.</span><span class="token method function property-access">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 回调执行函数</span>\n    <span class="token keyword">function</span> <span class="token function">handleCallBack</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>服务端返回如下（返回时即执行全局函数）：</p>\n<pre class="language-js"><code class="language-js"><span class="token function">handleCallBack</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"status"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ol start="2">\n<li>jQuery ajax</li>\n</ol>\n<pre class="language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    dataType<span class="token operator">:</span> <span class="token string">\'jsonp\'</span><span class="token punctuation">,</span> <span class="token comment">// 请求方式为jsonp</span>\n    jsonpCallback<span class="token operator">:</span> \'handleCallBack"<span class="token punctuation">,</span> <span class="token comment">// 自定义回调函数名</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ol start="3">\n<li>vue.js</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">$http</span><span class="token punctuation">.</span><span class="token method function property-access">jsonp</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    jsonp<span class="token operator">:</span> <span class="token string">\'handleCallBack\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre>\n<ol start="4">\n<li>后端node.js代码示例</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\'?\'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fn <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// jsonp返回设置</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/javascript"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>fn <span class="token operator">+</span> <span class="token string">\'(\'</span> <span class="token operator">+</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>jsonp缺点：只能实现GET请求。</strong></p>\n<h2 id="2documentdomain--iframe%E8%B7%A8%E5%9F%9F">2.document.domain + iframe跨域<a class="anchor" href="#2documentdomain--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p><strong>此方案仅限主域相同，子域不同的跨域应用场景。</strong></p>\n<p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>\n<p>1）父窗口(<a href="http://www.domain.com/a.html">http://www.domain.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://child.domain.com/b.html">http://child.domain.com/b.html</a>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>scirpt<span class="token operator">></span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">domain</span> <span class="token operator">=</span> <span class="token string">\'domain.com\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">\'amin\'</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>scirpt<span class="token operator">></span>\n</code></pre>\n<p>2）子窗口(<a href="http://child.domain.com/b.html">http://child.domain.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">domain</span> <span class="token operator">=</span> <span class="token string">\'domain.com\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取父窗口中的变量</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'get js data from parent-->\'</span> <span class="token operator">+</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token property-access">user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="3locationhash--iframe%E8%B7%A8%E5%9F%9F">3.location.hash + iframe跨域<a class="anchor" href="#3locationhash--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>\n<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 向b.html传hash值</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">+</span> <span class="token string">\'#user=admin\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 开放给同域c.html的回调方法</span>\n    <span class="token keyword">function</span> <span class="token function">onCallback</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from c.html --->\'</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 监听a.html传来的hash值，再传给c.html</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">+</span> <span class="token dom variable">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>3）c.html(<a href="http://www.domain1.com/c.html">http://www.domain1.com/c.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token comment">// 监听b.html传来的hash值</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 再通过操作同域a.html的js回调，将结果放回</span>\n        <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token method function property-access">onCallback</span><span class="token punctuation">(</span><span class="token string">\'hello; \'</span> <span class="token operator">+</span> <span class="token dom variable">location</span><span class="token punctuation">.</span><span class="token property-access">hash</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">\'#user=\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="4windowname--iframe%E8%B7%A8%E5%9F%9F"><a href="http://4.window.name">4.window.name</a> + iframe跨域<a class="anchor" href="#4windowname--iframe%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">proxy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加载跨域页面</span>\n    iframe<span class="token punctuation">.</span><span class="token property-access">src</span> <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\n    <span class="token comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span>\n    iframe<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 第2次onload（同域proxy页）成功后，读取同域window.name中数据</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">destoryFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n            <span class="token comment">// 第1次onload（跨域页）成功后，切换到同域代理页面</span>\n            iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">location</span> <span class="token operator">=</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>\'</span><span class="token punctuation">;</span>\n            state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span>\n    <span class="token keyword">function</span> <span class="token function">destoryFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token property-access">document</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token method function property-access">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 请求跨域b页面数据</span>\n<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）proxy.html(<a href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>)</p>\n<p>中间代理页，与a.html同域，内容为空即可。</p>\n<p>3）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'This is domain2 data!\'</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="5postmessage%E8%B7%A8%E5%9F%9F">5.postMessage跨域<a class="anchor" href="#5postmessage%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>\n<ol>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ol>\n<p>用法：</p>\n<p><code>postMessage(data, origin)</code>方法接受两个参数</p>\n<p>data：html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</p>\n<p>origin：协议+主机+端口号，也可以设置为&quot;*&quot;，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为&quot;/&quot;。</p>\n<p>1）a.html(<a href="http://www.domain1.com/a.html">http://www.domain1.com/a.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>"</span> style<span class="token operator">=</span><span class="token string">"display:none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">const</span> iframe <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'iframe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    iframe<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">\'aym\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 向domain2传送跨域数据</span>\n        iframe<span class="token punctuation">.</span><span class="token property-access">contentWindow</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com">http://www.domain2.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 接收domain2返回数据</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from domain2 --->\'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）b.html(<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token comment">// 接收domain1的数据</span>\n    <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'data from domain1 ---> \'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            data<span class="token punctuation">.</span><span class="token property-access">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n            <span class="token comment">// 处理后再发回domain1</span>\n            <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="6%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors">6.跨域资源共享（CORS）<a class="anchor" href="#6%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors">§</a></h2>\n<p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p>\n<p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p>\n<p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p>\n<p><strong>前端设置</strong></p>\n<p>1）原生ajax</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 前端设置是否带cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre>\n<p>示例代码</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IE8/9需用window.XDomainRequest兼容</span>\n\n<span class="token comment">// 前端设置是否带cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'post\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">,</span> <span class="token string">\'application/x-www-form-urlencoded\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token string">\'user=admin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nxhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">readyStaet</span> <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>2）jQuery ajax</p>\n<pre class="language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token method function property-access">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token spread operator">...</span>\n    xhrFields<span class="token operator">:</span> <span class="token punctuation">{</span>\n        withCredentials<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 前端设置是否带cookie</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 会让请求头中包含跨域的额外信息，但不会包含cookie</span>\n    <span class="token spread operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>3）vue框架</p>\n<ul>\n<li>axios设置</li>\n</ul>\n<pre class="language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token property-access">defaults</span><span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre>\n<ul>\n<li>vue-resource设置</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">http</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">credentials</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre>\n<p><strong>服务端设置</strong></p>\n<p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p>\n<p>1）Java后台</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">/*\n * 导入包：import javax.servlet.http.HttpServletResponse;\n * 接口参数中定义：HttpServletResponse response\n */</span>\n\n<span class="token comment">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加\'/\'</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 允许前端带认证cookie：启用此项后，上面的域名不能为\'*\'，必须指定具体的域名，否则浏览器会提示</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span>\nresponse<span class="token punctuation">.</span><span class="token method function property-access">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type,X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）Nodejs后台示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 数据块接收中</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据接收完毕</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 跨域后台设置</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token operator">:</span> <span class="token string">\'true\'</span><span class="token punctuation">,</span> <span class="token comment">// 后端允许发送cookie</span>\n            <span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">,</span> <span class="token comment">// 允许访问的域（协议+域名+端口）</span>\n            <span class="token comment">/* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */</span>\n            <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>  <span class="token comment">// HttpOnly的作用是让js无法读取cookie</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserve<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="7nginx%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">7.nginx代理跨域<a class="anchor" href="#7nginx%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p><strong>1、 nginx配置解决iconfont跨域</strong></p>\n<p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>\n<pre class="language-js"><code class="language-js"><span class="token dom variable">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n  add_header <span class="token maybe-class-name">Access</span><span class="token operator">-</span><span class="token maybe-class-name">Control</span><span class="token operator">-</span><span class="token maybe-class-name">Allow</span><span class="token operator">-</span><span class="token maybe-class-name">Origin</span> <span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>2、 nginx反向代理接口跨域</strong></p>\n<p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p>\n<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>\n<p>nginx具体配置：</p>\n<pre class="language-python"><code class="language-python"><span class="token comment">#proxy服务器</span>\nserver <span class="token punctuation">{</span>\n    listen       <span class="token number">81</span><span class="token punctuation">;</span>\n    server_name  www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>\n\n    location <span class="token operator">/</span> <span class="token punctuation">{</span>\n        proxy_pass   http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>  <span class="token comment">#反向代理</span>\n        proxy_cookie_domain www<span class="token punctuation">.</span>domain2<span class="token punctuation">.</span>com www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token comment">#修改cookie里域名</span>\n        index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>\n\n        <span class="token comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span>\n        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>domain1<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token comment">#当前端只跨域不带cookie时，可为*</span>\n        add_header Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Credentials true<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>1）前端代码示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 前端开关：浏览器是否读写cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 访问nginx中的代理服务器</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'get\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com:81/?user=admin\'">http://www.domain1.com:81/?user=admin\'</a></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>2）Nodejs后台示例</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">.</span><span class="token method function property-access">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 向前台写cookie</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>   <span class="token comment">// HttpOnly:脚本无法读取</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="8nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">8.Nodejs中间件代理跨域<a class="anchor" href="#8nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p>\n<p><strong>1、 非vue框架的跨域（2次跨域）</strong></p>\n<p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p>\n<p>1）前端代码示例：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 前端开关：浏览器是否读写cookie</span>\nxhr<span class="token punctuation">.</span><span class="token property-access">withCredentials</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 访问http-proxy-middleware代理服务器</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'get\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com:3000/login?user=admin\'">http://www.domain1.com:3000/login?user=admin\'</a></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>2）中间件服务器：</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http-proxy-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 代理跨域目标接口</span>\n    target<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">,</span>\n    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 修改响应头信息，实现跨域并允许带cookie</span>\n    <span class="token function-variable function">onProxyRes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">proxyRes<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">header</span><span class="token punctuation">(</span><span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token punctuation">,</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">header</span><span class="token punctuation">(</span><span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token punctuation">,</span> <span class="token string">\'true\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 修改响应信息中的cookie域名</span>\n    cookieDomainRewrite<span class="token operator">:</span> <span class="token string">\'www.domain1.com\'</span>  <span class="token comment">// 可以为false，表示不修改</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Proxy server is listen at port 3000...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>3）Nodejs后台</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> postData <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据块接收中</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 数据接收完毕</span>\n    req<span class="token punctuation">.</span><span class="token method function property-access">addListener</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 跨域后台设置</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token string">\'Access-Control-Allow-Credentials\'</span><span class="token operator">:</span> <span class="token string">\'true\'</span><span class="token punctuation">,</span>     <span class="token comment">// 后端允许发送Cookie</span>\n            <span class="token string">\'Access-Control-Allow-Origin\'</span><span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain1.com">http://www.domain1.com</a>\'</span><span class="token punctuation">,</span>    <span class="token comment">// 允许访问的域（协议+域名+端口）</span>\n            <span class="token comment">/* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */</span>\n            <span class="token string">\'Set-Cookie\'</span><span class="token operator">:</span> <span class="token string">\'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly\'</span>  <span class="token comment">// HttpOnly的作用是让js无法读取cookie</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        res<span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>2、 vue框架的跨域（1次跨域）</strong></p>\n<p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<p>webpack.config.js部分配置：</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token spread operator">...</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        historyApiFallback<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        proxy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            context<span class="token operator">:</span> <span class="token string">\'/login\'</span><span class="token punctuation">,</span>\n            target<span class="token operator">:</span> <span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">,</span>  <span class="token comment">// 代理跨域目标接口</span>\n            changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 当代理某些https服务报错时用</span>\n            cookieDomainRewrite<span class="token operator">:</span> <span class="token string">\'www.domain1.com\'</span>  <span class="token comment">// 可以为false，表示不修改</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        noInfo<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="9-websocket%E5%8D%8F%E8%AE%AE%E8%B7%A8%E5%9F%9F">9. WebSocket协议跨域<a class="anchor" href="#9-websocket%E5%8D%8F%E8%AE%AE%E8%B7%A8%E5%9F%9F">§</a></h2>\n<p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p>\n<p>原生WebSocket API使用起来不太方便，<a href="http://xn--Socket-hz8ig3bo82im51b.io">我们使用Socket.io</a>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>\n<p>1）前端代码</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>user input：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"<a class="token url-link" href="https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js">https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js</a>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">\'<a class="token url-link" href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 连接成功处理</span>\nsocket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'connect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 监听服务端消息</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'data from server: ---> \'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 监听服务端关闭</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'disconnect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server socket has closed.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    socket<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>2）Nodejs socket后台</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'socket.io\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启http服务</span>\n<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token method function property-access">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token string">\'Content-type\'</span><span class="token operator">:</span> <span class="token string">\'text/html\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token string">\'8080\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Server is running at port 8080...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 监听socket连接</span>\nsocket<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'connection\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 接收信息</span>\n    client<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        client<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token string">\'hello：\'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'data from client: ---> \'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 断开处理</span>\n    client<span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">\'disconnect\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Client socket has closed.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F">什么是跨域</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E5%9C%BA%E6%99%AF">常见跨域场景</a></li><li><a href="#%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">跨域解决方案</a></li><li><a href="#1%E9%80%9A%E8%BF%87jsonp%E8%B7%A8%E5%9F%9F">1.通过jsonp跨域</a></li><li><a href="#2documentdomain--iframe%E8%B7%A8%E5%9F%9F">2.document.domain + iframe跨域</a></li><li><a href="#3locationhash--iframe%E8%B7%A8%E5%9F%9F">3.location.hash + iframe跨域</a></li><li><a href="#4windowname--iframe%E8%B7%A8%E5%9F%9F">4.window.name + iframe跨域</a></li><li><a href="#5postmessage%E8%B7%A8%E5%9F%9F">5.postMessage跨域</a></li><li><a href="#6%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors">6.跨域资源共享（CORS）</a></li><li><a href="#7nginx%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">7.nginx代理跨域</a></li><li><a href="#8nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F">8.Nodejs中间件代理跨域</a></li><li><a href="#9-websocket%E5%8D%8F%E8%AE%AE%E8%B7%A8%E5%9F%9F">9. WebSocket协议跨域</a></li></ol></nav>'
        } }),
    'author': "jianyun2020",
    'contributors': [
        "jianyun2020"
    ],
    'date': "2021-01-26T10:06:49.000Z",
    'updated': null,
    'excerpt': "什么是跨域 跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 广义的跨域： 1. 资源跳转：A链接、重定向、表单提交 2. 资源嵌入：<link>、<script>、<img>、<frame>等dom标签，还有样式中backgrou...",
    'cover': undefined,
    'categories': [
        "面试"
    ],
    'tags': [
        "面试",
        "学习笔记",
        "跨域"
    ],
    'blog': {
        "isPost": true,
        "posts": [
            {
                "pagePath": "posts/Vue Router.md",
                "title": "Vue Router",
                "link": "posts/Vue Router.html",
                "date": "2021-03-17T08:01:47.000Z",
                "updated": "2021-03-22T09:30:18.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "Vue"
                ],
                "tags": [
                    "Vue Router",
                    "学习笔记"
                ],
                "excerpt": "基础 起步 用 Vue.js + Vue Router 创建单页应用，感觉很自然：使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 V..."
            },
            {
                "pagePath": "posts/Vuex.md",
                "title": "Vuex",
                "link": "posts/Vuex.html",
                "date": "2021-03-15T02:10:17.000Z",
                "updated": "2021-03-17T08:00:55.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "Vue"
                ],
                "tags": [
                    "Vuex",
                    "学习笔记"
                ],
                "excerpt": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容..."
            },
            {
                "pagePath": "posts/跨浏览器标签页通信.md",
                "title": "跨浏览器标签页通信",
                "link": "posts/跨浏览器标签页通信.html",
                "date": "2021-03-11T04:59:20.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "HTML"
                ],
                "tags": [
                    "面试",
                    "跨页面通信",
                    "学习笔记"
                ],
                "excerpt": "在浏览器中，我们可以同时打开多个Tab页，每个Tab页可以粗略理解为一个“独立”的运行环境，即使是全局对象也不会在多个Tab间共享。然而有些时候，我们希望能在这些“独立”的Tab页面之间同步页面的数据、信息或状态。 正如下面...",
                "cover": "../posts/images/html.gif"
            },
            {
                "pagePath": "posts/history和hash两种路由.md",
                "title": "history和hash两种路由",
                "link": "posts/history和hash两种路由.html",
                "date": "2021-03-11T04:59:20.000Z",
                "updated": "2021-03-11T05:40:11.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "HTML"
                ],
                "tags": [
                    "面试",
                    "路由",
                    "学习笔记"
                ],
                "excerpt": "什么是SPA SPA 是 single page web application 的简称，译为单页Web应用。 简单的说 SPA 就是一个WEB项目只有一个 HTML 页面，一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转。 取而代之的是利用 JS 动...",
                "cover": "images/chuantong.png"
            },
            {
                "pagePath": "posts/动态规划.md",
                "title": "动态规划",
                "link": "posts/动态规划.html",
                "date": "2021-03-11T04:59:20.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "算法"
                ],
                "tags": [
                    "面试",
                    "动态规划",
                    "学习笔记"
                ],
                "excerpt": "动态规划（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有重叠子问题和最优子结..."
            },
            {
                "pagePath": "posts/111.md",
                "title": "每日总结",
                "link": "posts/111.html",
                "date": "2021-03-04T13:28:28.000Z",
                "updated": "2021-03-21T13:23:39.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "Vue"
                ],
                "tags": [
                    "面试",
                    "原型链",
                    "学习笔记"
                ],
                "excerpt": "周末时间利用 s 1111"
            },
            {
                "pagePath": "posts/继承.md",
                "title": "继承",
                "link": "posts/继承.html",
                "date": "2021-03-04T13:28:28.000Z",
                "updated": "2021-03-08T13:18:57.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "JavaScript"
                ],
                "tags": [
                    "学习笔记",
                    "继承",
                    "面试"
                ],
                "excerpt": "原型链继承 function Parent() { this.name = 'kevin'; } Parent.prototype.getName = function() { console.log(this.name); } function Child() { } Child.prototype = new Parent(); var child1 = new Child(); console.log..."
            },
            {
                "pagePath": "posts/行内元素和块级元素.md",
                "title": "行内元素和块级元素",
                "link": "posts/行内元素和块级元素.html",
                "date": "2021-03-04T13:28:28.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "HTML"
                ],
                "tags": [
                    "行内元素和块级元素"
                ],
                "excerpt": "常用行内元素 - a：锚点 - span：常用内联容器，定义文本内区块 - label：表格标签 - strong：粗体强调 - em：强调 - br：换行 - img：图片 - input：输入框 - select：项目选择 - textarea：多行文本输入框 - cite：引用 常用..."
            },
            {
                "pagePath": "posts/微信内置浏览器播放视频.md",
                "title": "微信内置X5内核浏览器播放视频相关问题",
                "link": "posts/微信内置浏览器播放视频.html",
                "date": "2021-03-03T12:50:17.000Z",
                "updated": "2021-03-03T13:18:54.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "微信的坑"
                ],
                "tags": [
                    "视频播放"
                ],
                "excerpt": "官网 原生video标签 <video id=\"vid\" src=\"./assets/test.mp4\" poster=\"./assets/test.png\" controls></video> X5内核视频两种播放形态 1. 页面内播放 X5内核视频在用户点击后默认会进入全屏播放，前端可以设置video的x5-plays...",
                "cover": "images/wx01.png"
            },
            {
                "pagePath": "posts/Golang基础.md",
                "title": "Golang基础",
                "link": "posts/Golang基础.html",
                "date": "2021-02-26T04:55:47.000Z",
                "updated": "2021-02-26T05:36:43.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "Golang"
                ],
                "tags": [
                    "学习笔记"
                ],
                "excerpt": "基本语法 package main import \"fmt\" func main() { // 此括号不能写在单独行 fmt.Println(\"Hello Go~\") } 格式化字符串 Go语言使用fmt.Sprintf格式化字符串并赋值给新串 package main import \"fmt\" func main() { // %d表示整..."
            },
            {
                "pagePath": "posts/原型链.md",
                "title": "原型链",
                "link": "posts/原型链.html",
                "date": "2021-02-25T14:45:38.000Z",
                "updated": "2021-03-04T13:37:41.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "JavaScript"
                ],
                "tags": [
                    "面试",
                    "原型链",
                    "学习笔记"
                ],
                "excerpt": "构造函数 本质就是函数，与普通函数一样，一般命名首字母大写来与普通函数区分，用new关键字调用。 **每个函数再创建时，会自动创建prototype属性，它指向一个对象，这个对象正是调用该构造函数而创建的实例的原型。**每一个Ja..."
            },
            {
                "pagePath": "posts/UE4.md",
                "title": "UE4学习笔记",
                "link": "posts/UE4.html",
                "date": "2021-02-01T04:46:51.000Z",
                "updated": "2021-03-11T09:31:40.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "UE4"
                ],
                "tags": [
                    "UE4",
                    "学习笔记"
                ],
                "excerpt": " 1. 常用快捷键 2. 变更路线节点：Reroute Node 3. Execute Console Command命令 1. 设置分辨率r.setRes 1920x1080 2. r.ScreenPercentage 200：双倍渲染 UE4像素流送系统 特点： 1. 流送并非播放预先录制的视频片段，而是播放...",
                "cover": "images/shortcut_key1.png"
            },
            {
                "pagePath": "posts/React笔记.md",
                "title": "React学习笔记",
                "link": "posts/React笔记.html",
                "date": "2021-01-29T14:58:22.000Z",
                "updated": "2021-02-21T23:30:13.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "React",
                    "学习笔记"
                ],
                "excerpt": " 1. 在html中简易使用jsx语法时，需要引入babel插件，同时设置<script type=\"text/babel\"></script> 2. js语法创建虚拟DOM：React.createElement('h1', {id: 'test'}, 'Hello, React') 3. 关于虚拟DOM： 1. 本质就是Object类型...",
                "cover": "images/lifeold.png"
            },
            {
                "pagePath": "posts/前端基础面试题.md",
                "title": "HTML篇",
                "link": "posts/前端基础面试题.html",
                "date": "2021-01-27T07:14:50.000Z",
                "updated": "2021-02-01T04:46:51.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "HTML",
                    "CSS",
                    "JavaScript"
                ],
                "excerpt": "说说title和alt属性 HTML5有哪些新特性、移除了哪些元素 iframe有那些缺点？ HTML W3C的标准 Doctype作用? 严格模式与混杂模式如何区分？它们有何意义? HTML全局属性(global attribute)有哪些 viewport的content属性作用 div+c..."
            },
            {
                "pagePath": "posts/前端本地存储.md",
                "title": "前端本地存储",
                "link": "posts/前端本地存储.html",
                "date": "2021-01-27T03:51:39.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "前端本地存储"
                ],
                "excerpt": "cookie 作用 cookie是纯文本，没有可执行代码。存储数据，当用户访问了某个网站（网页）的时候，我们就可以通过cookie来向访问者电脑上存储数据，或者某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（..."
            },
            {
                "pagePath": "posts/跨域及常见解决办法.md",
                "title": "跨域及常见解决方法",
                "link": "posts/跨域及常见解决办法.html",
                "date": "2021-01-26T10:06:49.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "跨域"
                ],
                "excerpt": "什么是跨域 跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 广义的跨域： 1. 资源跳转：A链接、重定向、表单提交 2. 资源嵌入：<link>、<script>、<img>、<frame>等dom标签，还有样式中backgrou..."
            },
            {
                "pagePath": "posts/垃圾回收机制.md",
                "title": "垃圾回收机制",
                "link": "posts/垃圾回收机制.html",
                "date": "2021-01-26T03:09:41.000Z",
                "updated": "2021-01-26T06:08:48.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "垃圾回收机制"
                ],
                "excerpt": "JavaScript具有自动垃圾收集机制(GC:GarbageCollection)，也就是说，执行环境会负责管理代码执行过程中使用的内存。开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。 内存生命周期 JS环...",
                "cover": "./images/markandsweep.png"
            },
            {
                "pagePath": "posts/防抖和节流.md",
                "title": "防抖和节流",
                "link": "posts/防抖和节流.html",
                "date": "2021-01-25T10:51:54.000Z",
                "updated": "2021-01-26T03:09:41.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "防抖和节流",
                    "学习笔记"
                ],
                "excerpt": " - 相同：在不影响客户体验的前提下，将频繁的回调函数，进行次数缩减，避免大量计算导致页的页面卡顿。 - 不同：防抖是将多次执行变为最后一次执行，节流是将多次执行变为在规定时间内只执行一次。 防抖 定义：指触发事件后在..."
            },
            {
                "pagePath": "posts/css_渐变.md",
                "title": "CSS渐变",
                "link": "posts/css_渐变.html",
                "date": "2021-01-25T09:32:57.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "CSS"
                ],
                "tags": [
                    "CSS",
                    "学习笔记",
                    "渐变"
                ],
                "excerpt": "CSS渐变<image>类型的一种特殊类型<gradient>表示，由两种或多种颜色之间的渐进过渡组成。有三种类型的渐变： - 线性（由linear-gradient()函数创建） - 径向（由radial-gradient()函数创建） - 圆锥（由conic-gradient()函数创...",
                "cover": "./images/deg.png"
            },
            {
                "pagePath": "posts/Hook.md",
                "title": "Hook",
                "link": "posts/Hook.html",
                "date": "2021-01-25T07:07:55.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "16.8版本新增特性。可以在不编写class的情况下使用state以及其它的React特性。 import React, { useState } from 'react'; function Example() { // 声明一个新的叫做“count”的state变量 const [count, setCount] = useState..."
            },
            {
                "pagePath": "posts/css_background.md",
                "title": "CSS的background属性详解",
                "link": "posts/css_background.html",
                "date": "2021-01-25T07:07:55.000Z",
                "updated": "2021-01-25T08:30:22.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "CSS"
                ],
                "tags": [
                    "CSS",
                    "学习笔记",
                    "background"
                ],
                "excerpt": "background是一中CSS简写属性，可以在一次声明中定义一个或多个属性：background-clip、background-color、background-image、background-origin、background-position、background-repeat、background-size、background-attac..."
            },
            {
                "pagePath": "posts/List.md",
                "title": "数据结构与算法JavaScript-列表",
                "link": "posts/List.html",
                "date": "2021-01-22T08:08:14.000Z",
                "updated": "2021-01-25T02:27:19.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "数据结构与算法"
                ],
                "tags": [
                    "JavaScript",
                    "数据结构与算法",
                    "学习笔记"
                ],
                "excerpt": "列表的抽象数据类型定义 方法和方法 说明 listSize(属性) 列表的元素个数 pos(属性) 列表的当前位置 length(属性) 返回列表中元素的个数 clear(方法) 清空列表中的所有元素 toString(方法) 返回列表的字符串形式 getElement(方..."
            },
            {
                "pagePath": "posts/元素渲染.md",
                "title": "React-元素渲染",
                "link": "posts/元素渲染.html",
                "date": "2021-01-22T08:08:14.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "元素是构成React应用的最小砖块，其描述了你在屏幕上想看到的内容。 const element = <h1>Hello, World</h1>; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一..."
            },
            {
                "pagePath": "posts/JSX简介.md",
                "title": "React-JSX简介",
                "link": "posts/JSX简介.html",
                "date": "2021-01-21T07:25:11.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "考虑如下变量声明： const element = <h1>Hello, world!</h1>; 这个有趣的标签语法既不是字符串也不是 HTML。它被称为 JSX，是一个 JavaScript 的语法扩展。 在JSX中嵌入表达式 const name = 'Bob'; const element = <h1>Hello..."
            },
            {
                "pagePath": "posts/Array.md",
                "title": "数据结构与算法JavaScript-数组",
                "link": "posts/Array.html",
                "date": "2021-01-20T05:13:02.000Z",
                "updated": "2021-01-21T06:40:51.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "数据结构与算法"
                ],
                "tags": [
                    "JavaScript",
                    "数据结构与算法",
                    "学习笔记"
                ],
                "excerpt": "数组 JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可 能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中 的属性名必须是字符串。 数组在 JavaScrip..."
            }
        ],
        "categories": [
            {
                "name": "面试",
                "count": 5
            },
            {
                "name": "React",
                "count": 4
            },
            {
                "name": "HTML",
                "count": 3
            },
            {
                "name": "Vue",
                "count": 3
            },
            {
                "name": "CSS",
                "count": 2
            },
            {
                "name": "JavaScript",
                "count": 2
            },
            {
                "name": "数据结构与算法",
                "count": 2
            },
            {
                "name": "Golang",
                "count": 1
            },
            {
                "name": "UE4",
                "count": 1
            },
            {
                "name": "微信的坑",
                "count": 1
            },
            {
                "name": "算法",
                "count": 1
            }
        ],
        "tags": [
            {
                "name": "学习笔记",
                "count": 22
            },
            {
                "name": "面试",
                "count": 11
            },
            {
                "name": "JavaScript",
                "count": 6
            },
            {
                "name": "React",
                "count": 4
            },
            {
                "name": "CSS",
                "count": 3
            },
            {
                "name": "原型链",
                "count": 2
            },
            {
                "name": "数据结构与算法",
                "count": 2
            },
            {
                "name": "background",
                "count": 1
            },
            {
                "name": "HTML",
                "count": 1
            },
            {
                "name": "UE4",
                "count": 1
            },
            {
                "name": "Vue Router",
                "count": 1
            },
            {
                "name": "Vuex",
                "count": 1
            },
            {
                "name": "前端本地存储",
                "count": 1
            },
            {
                "name": "动态规划",
                "count": 1
            },
            {
                "name": "垃圾回收机制",
                "count": 1
            },
            {
                "name": "渐变",
                "count": 1
            },
            {
                "name": "继承",
                "count": 1
            },
            {
                "name": "行内元素和块级元素",
                "count": 1
            },
            {
                "name": "视频播放",
                "count": 1
            },
            {
                "name": "跨域",
                "count": 1
            },
            {
                "name": "跨页面通信",
                "count": 1
            },
            {
                "name": "路由",
                "count": 1
            },
            {
                "name": "防抖和节流",
                "count": 1
            }
        ]
    }
};
