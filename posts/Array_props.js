import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "posts/Array.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/Array.html",
    'title': "数据结构与算法JavaScript-数组",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>数据结构与算法JavaScript-数组</h1>\n<h2 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可\n能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中\n的属性名必须是字符串。 数组在 JavaScript 中只是一种特殊的对象， 所以效率上不如其他\n语言中的数组高。\nJavaScript 中的数组， 严格来说应该称作对象， 是特殊的 JavaScript 对象， 在内部被归类为数\n组。 由于 Array 在 JavaScript 中被当作对象， 因此它有许多属性和方法可以在编程时使用。</p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">§</a></h2>\n<h3 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">§</a></h3>\n<p>两种方式：</p>\n<ul>\n<li>通过[ ]操作符（推荐）</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示4</span>\n</code></pre>\n<ul>\n<li>通过Array的构造函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示3</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr3.length显示10</span>\n</code></pre>\n<p><em>特性：脚本语言中的元素不必是同一种数据类型。</em></p>\n<p>可通过Array.isArray()来判断一个对象是否是数组。</p>\n<h3 id="%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组<a class="anchor" href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">§</a></h3>\n<p>求数组中元素的和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 53</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组<a class="anchor" href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">§</a></h3>\n<p>通过字符串对象的split()方法也可以生成数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> setence <span class="token operator">=</span> <span class="token string">"Hello Array"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> setence<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过空格分割</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Hello\', \'Array\' ]</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作<a class="anchor" href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h3>\n<p>将一个数组赋值给另一个数组：此时，只是为被赋值的数组增加了一个新的引用，当修改原数组中的值时，被赋值数组中的值也跟着改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>这种行为被称为<strong>浅复制</strong>，更好的方案是使用<strong>深复制</strong>，将原数组中的每一个元素都赋值一份到新数组中。可以写一个深复制函数来实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样，修改原数组中的元素时，新数组中的元素不会改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samesums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">deepCopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> samesums<span class="token punctuation">)</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samesums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre>\n<h2 id="%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数<a class="anchor" href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">§</a></h2>\n<p>JavaScript提供了用来访问数组元素的函数，叫做<strong>存取函数</strong>,这些函数返回目标数组的某种变体。</p>\n<h3 id="%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素<a class="anchor" href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">§</a></h3>\n<p>indexOf( )：用来查找传入的参数在目标数组中是否存在。存在返回索引，不存在返回-1。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Lily\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Bob\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Faker\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n</code></pre>\n<p>如果数组中包含多个相同的元素，indexOf( )函数总是返回第一个元素的索引；lastIndexOf( )则返回最后一个元素的索引。</p>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">§</a></h3>\n<p>join( )和toString( )方法可以将数组转化为字符串，数组各元素之间用逗号隔开。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'World\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token comment">// join()方法可以传入替换默认逗号的字符</span>\n<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello-World</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组<a class="anchor" href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">§</a></h3>\n<p>concat()：合并多个数组创建一个新数组\n工作原理：发起者是一个数组，参数是另一个数组。作为参数的数组中的所有元素都被连接到发起者元素的后边</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<p>splice()：截取一个数组的子集创建一个新数组\n工作原理：第一个参数是截取的起始索引，第二个参数是截取的长度</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<h2 id="%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数<a class="anchor" href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">§</a></h2>\n<p>通过可变函数，可以不必引用数组中的某个元素，就能改变数组的内容。</p>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">§</a></h3>\n<p>push()：将一个元素添加到数组末尾</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n\n<span class="token comment">// 也可使用数组的length属性为数组添加元素</span>\nnums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>unshift()：将一个元素添加到数组开头</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 如果不用数组提供的可变函数，则新元素添加进来后，需要把每个元素都相应地后移一个位置</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnums<span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\n\n<span class="token comment">// 随着数组存储的元素越来越多，上述代码会越来越低效，推荐使用unshift()方法</span>\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以一次为数组添加多个元素</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 0, 1, 2]</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>pop()：删除数组末尾的元素\n``js\nlet nums = [1, 2, 3];\nnums.pop();\nconsole.log(nums); // [1, 2]</p>\n<pre class="language-autoit"><code class="language-autoit">\n如果没有可变函数，从数组中删除第一个元素需要将后续元素各自向前移动一个位置，同样低效\n```js\nlet nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; nums.length; ++i) {</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token comment">; // [2, 3,]</span>\n</code></pre>\n<p>除了要将后续元素前移一位，还多了一个元素，打印数组中的元素时会发现最后多了一个逗号，推荐使用shift()方法</p>\n<p>shift()：删除数组的第一个元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<p>pop()和shift()方法都将删掉的元素作为方法的返回值，因此可以使用一个变量来保存删除的元素</p>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>使用splice()方法为数组添加元素，需提供一下参数：</p>\n<ul>\n<li>起始索引（希望开始添加元素的地方）</li>\n<li>需要删除的元素个数（添加元素时改参数设为0）</li>\n<li>想要添加进数组的元素</li>\n</ul>\n<p>下面的程序在数组中间插入元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<p>下面是使用splice()方法从数组中删除元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>reverse()：将数组中的元素顺序进行反转</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span>\n</code></pre>\n<p>sort()：对数组中的元素进行排序</p>\n<p>如果元素是字符串类型，数组的可变方法sort()就很好用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Mike\'</span><span class="token punctuation">,</span> <span class="token string">\'Bryan\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Bryan\', \'David\', \'Mike\']</span>\n</code></pre>\n<p>但如果数组元素是数字类型，sort()方法的排序结果就不能让人满意了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 100, 2, 200, 3]</span>\n</code></pre>\n<p>sort()方法是按照字典顺序对元素进行排序的，因此它<strong>假定所有元素都是字符串类型</strong>，在上一个例子中，即使元素是数字类型，也被认为是字符串类型。为了让sort()方法也能排序数字类型的元素，可以在调用方法时传入一个大小比较函数，排序时，sort()方法将会根据该函数比较数组中的两个元素的大小，从而决定整个数组的排序。</p>\n<p>对于数字类型，该函数可以是一个简单的相减操作，从一个数字中减去另一个数字。如果结果为负，那么被减数小于减数；如果结果为0，那么被减数等于减数；如果结果为正，那么被减数大于减数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 100, 200]</span>\n</code></pre>\n<h2 id="%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">迭代器方法<a class="anchor" href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">§</a></h2>\n<p>最后一组方法时<strong>迭代器</strong>方法。这些方法对数组中的每个元素应用一个函数，可以返回一个值、一组值或者一个新数组</p>\n<h3 id="%E4%B8%8D%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%96%B9%E6%B3%95">不生成新数组的迭代器方方法<a class="anchor" href="#%E4%B8%8D%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%96%B9%E6%B3%95">§</a></h3>\n<p>此组迭代器方法不产生任何新数组，相反，它们要么对数组中的每个元素执行某种操作，要么返回一个值。</p>\n<p>forEach()：该方法接受一个函数作为参数，对数组中的每个元素使用该函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 1 1</span>\n<span class="token comment">// 2 4</span>\n<span class="token comment">// 3 9</span>\n</code></pre>\n<p>every()：该方法接受一个返回值为布尔类型的函数，对数组中的每个元素使用该函数。如果对于所有的元素，该函数均返回true， 则该方法返回true。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n<p>some()：该方法也接受一个返回值为布尔类型的函数，只要有一个元素使得该函数返回值为true，该方法就返回true</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n<p>reduce()：该方法接受一个函数，返回一个值。该方法会从一个累加值开始，不断对累加值和数组中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值。下面的例子展示了如何使用reduce()方法为数组中的元素求和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">runningTotal<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> runningTotal <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n<span class="token comment">// 执行过程如下</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span>\n</code></pre>\n<p>reduce()方法也可用来将数组中的元素连接成一个长的字符串：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">accumulatedString<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'the \'</span><span class="token punctuation">,</span> <span class="token string">\'quick \'</span><span class="token punctuation">,</span> <span class="token string">\'brown \'</span><span class="token punctuation">,</span> <span class="token string">\'fox \'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "the quick brown fox "</span>\n</code></pre>\n<p>JavaScript还提供了reduceRight()方法，和reduce()方法不同，它是从右到左执行。下面的程序使用reduceRight()方法将数组中的元素进行翻转：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">accumulatedString<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'the \'</span><span class="token punctuation">,</span> <span class="token string">\'quick \'</span><span class="token punctuation">,</span> <span class="token string">\'brown \'</span><span class="token punctuation">,</span> <span class="token string">\'fox \'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">reduceRight</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "fox brown quick the "</span>\n</code></pre>\n<h3 id="%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">生成新数组的迭代器方法<a class="anchor" href="#%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">§</a></h3>\n<p>map()：该方法接收一个函数，对数组中的每个元素使用此函数。与forEach()方法不同的是，map()方法返回一个新的数组，该数组的元素是对原有元素应用此函数得到的结果。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curve</span><span class="token punctuation">(</span><span class="token parameter">grade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> grade <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newgrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span>curve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newgrades<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [6, 7, 8]</span>\n</code></pre>\n<p>下面是对字符串数组使用map()方法的例子：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'for\'</span><span class="token punctuation">,</span> <span class="token string">\'you\'</span><span class="token punctuation">,</span> <span class="token string">\'me\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> acronym <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>acronym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'f\', \'y\', \'m\']</span>\n</code></pre>\n<p>filter()：和every()方法类似，传入一个返回值为布尔类型的函数。和every()方法不同的是，当对数组中的所有元素应用该函数，结果均为true，该方法并不返回true，而是返回一个新数组，该数组包含应用该函数后结果为true的元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> evens <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>evens<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4, 6, 8, 10 ]</span>\n<span class="token keyword">let</span> odds <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>odds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 3, 5, 7, 9 ]</span>\n</code></pre>\n<p>一个有趣案例：筛选由随机数生成的数组中大于等于60的元素数组</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">passing</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> passGrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>passing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grades<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>passGrades<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>案例：用filter()方法过滤字符串数组。下例过滤了不包含\'cie\'的单词：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">afterc</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'cie\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'recieve\'</span><span class="token punctuation">,</span> <span class="token string">\'deceive\'</span><span class="token punctuation">,</span> <span class="token string">\'percieve\'</span><span class="token punctuation">,</span> <span class="token string">\'deceit\'</span><span class="token punctuation">,</span> <span class="token string">\'concieve\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newWords <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>afterc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newWords<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'recieve\', \'percieve\', \'concieve\' ]</span>\n</code></pre>\n<h2 id="%E4%BA%8C%E7%BB%B4%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">二维和多维数组<a class="anchor" href="#%E4%BA%8C%E7%BB%B4%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript只支持一维数组，但是通过在数组里面保存数组元素的方式，可以轻松创建多维数组。</p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">创建二维数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h3>\n<p>二维数组类似一种由行和列构成的数据表格。在JavaScript中创建二维数组，需要先创建一个数组，然后让数组的每个元素也是一个数组。最起码，我们需要知道二维数组要包含多少行，有了这个信息，就可以创建一个n行1列的二维数组了：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> twod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> rows <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    twod<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>twod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [], [], [], [], [] ]</span>\n</code></pre>\n<p>这样做的问题是， 数组中的每个元素都是 undefined。更好的方式是遵照 JavaScript: The\nGood Parts（O’Reilly） 一书第 64 页的例子， Crockford 通过扩展 JavaScript 数组对象， 为\n其增加了一个新方法， 该方法根据传入的参数， 设定了数组的行数、 列数和初始值。 下面\n是这个方法的定义:</p>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">matrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numrows<span class="token punctuation">,</span> numcols<span class="token punctuation">,</span> initial</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numrows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numcols<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            columns<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> initial<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> columns<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword control-flow">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>下面是测试该方法的一些测试代码：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">matrix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n\n<span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">matrix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'Joe\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Joe</span>\n</code></pre>\n<p>还可以仅用一行代码就创建并且使用一组初始值来初始化一个二维数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grades<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>\n</code></pre>\n<p>对于小规模数据，这是创建二维数组最简单的方式。</p>\n<h3 id="%E5%A4%84%E7%90%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0">处理二维数组的元素<a class="anchor" href="#%E5%A4%84%E7%90%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0">§</a></h3>\n<p>处理二维数组中的元素，有两种最基本的方式：按列访问和按行访问。</p>\n<p>对于两种方式，我们均使用一组嵌入式的for循环。</p>\n<p>对于按列访问，外层循环对应行，内层循环对应列。以数组 grades 为例， 每一行对应一个学生的成绩记录。 我们可以将该学生的所有成绩相加， 然后除以科目数得到该学生的平均成绩。 下面的代码展示了这一过程：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Student \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\' average: \'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Student 1 average: 81.33</span>\n<span class="token comment">// Student 2 average: 79.67</span>\n<span class="token comment">// Student 3 average: 91.33</span>\n</code></pre>\n<p>对于按行访问，只需要调整for循环的顺序，使外层循环对应列，内层循环对应行即可。下面的程序计算了一个学生各科的平均成绩:</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Test \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\' average: \'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Test 1 average: 85.33</span>\n<span class="token comment">// Test 2 average: 84.33</span>\n<span class="token comment">// Test 3 average: 82.67</span>\n</code></pre>\n<h3 id="%E5%8F%82%E5%B7%AE%E4%B8%8D%E9%BD%90%E7%9A%84%E6%95%B0%E7%BB%84">参差不齐的数组<a class="anchor" href="#%E5%8F%82%E5%B7%AE%E4%B8%8D%E9%BD%90%E7%9A%84%E6%95%B0%E7%BB%84">§</a></h3>\n<p>参差不齐的数组是指数组中每行的元素个数彼此不同。 有一行可能包含三个元素， 另一行\n可能包含五个元素， 有些行甚至只包含一个元素。</p>\n<h2 id="%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84">对象数组<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84">§</a></h2>\n<p>数组还可以包含对象， 数组的方法和属性对对象依然适用。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Point</span></span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">y</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">displayPts</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">+</span> <span class="token string">\',\'</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Point \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">+</span> <span class="token string">\',\'</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npoints<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'After push: \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npoints<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'After shift: \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Point 1:1,2</span>\n<span class="token comment">// Point 2:3,4</span>\n<span class="token comment">// After push: </span>\n<span class="token comment">// 1,2</span>\n<span class="token comment">// 3,4</span>\n<span class="token comment">// 5,6</span>\n<span class="token comment">// After shift: </span>\n<span class="token comment">// 3,4</span>\n<span class="token comment">// 5,6</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">对象中的数组<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">§</a></h3>\n<p>在对象中，可以使用数组存储复杂的数据。下例中， 我们创建了一个对象， 用于保存观测\n到的周最高气温。 该对象有两个方法， 一个方法用来增加一条新的气温记录， 另外一个方\n法用来计算存储在对象中的平均气温。 代码如下所示：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">add</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">average</span> <span class="token operator">=</span> average<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> thisWeek <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>thisWeek<span class="token punctuation">.</span><span class="token method function property-access">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n</code></pre>\n<h2 id="%E7%BB%83%E4%B9%A0">练习<a class="anchor" href="#%E7%BB%83%E4%B9%A0">§</a></h2>\n<ol>\n<li>创建一个记录学生成绩的对象， 提供一个添加成绩的方法， 以及一个显示学生平均成绩的方法。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grade <span class="token operator">=</span> <span class="token punctuation">{</span>\n    gradeStore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    add<span class="token operator">:</span> add<span class="token punctuation">,</span>\n    average<span class="token operator">:</span> average\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">score</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span><span class="token method function property-access">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n</code></pre>\n<ol start="2">\n<li>将一组单词存储在一个数组中， 并按正序和倒序分别显示这些单词。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Aliy\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Brown\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Aliy\', \'Bob\', \'Brown\', \'David\' ]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'David\', \'Brown\', \'Bob\', \'Aliy\' ]</span>\n</code></pre>\n<ol start="4">\n<li>创建这样一个对象， 它将字母存储在一个数组中， 并且用一个方法可以将字母连在一起， 显示成一个单词。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Words</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">add</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">toWords</span> <span class="token operator">=</span> toWords<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        temp <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">return</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> myWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Words</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'L\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'O\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'V\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'E\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>myWord<span class="token punctuation">.</span><span class="token method function property-access">toWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LOVE</span>\n</code></pre>'
        } }),
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5JavaScript-\u6570\u7EC4"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可\n能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中\n的属性名必须是字符串。 数组在 JavaScript 中只是一种特殊的对象， 所以效率上不如其他\n语言中的数组高。\nJavaScript 中的数组， 严格来说应该称作对象， 是特殊的 JavaScript 对象， 在内部被归类为数\n组。 由于 Array 在 JavaScript 中被当作对象， 因此它有许多属性和方法可以在编程时使用。</p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">§</a></h2>\n<h3 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">§</a></h3>\n<p>两种方式：</p>\n<ul>\n<li>通过[ ]操作符（推荐）</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示4</span>\n</code></pre>\n<ul>\n<li>通过Array的构造函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示3</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr3.length显示10</span>\n</code></pre>\n<p><em>特性：脚本语言中的元素不必是同一种数据类型。</em></p>\n<p>可通过Array.isArray()来判断一个对象是否是数组。</p>\n<h3 id="%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组<a class="anchor" href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">§</a></h3>\n<p>求数组中元素的和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 53</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组<a class="anchor" href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">§</a></h3>\n<p>通过字符串对象的split()方法也可以生成数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> setence <span class="token operator">=</span> <span class="token string">"Hello Array"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> setence<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过空格分割</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Hello\', \'Array\' ]</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作<a class="anchor" href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h3>\n<p>将一个数组赋值给另一个数组：此时，只是为被赋值的数组增加了一个新的引用，当修改原数组中的值时，被赋值数组中的值也跟着改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>这种行为被称为<strong>浅复制</strong>，更好的方案是使用<strong>深复制</strong>，将原数组中的每一个元素都赋值一份到新数组中。可以写一个深复制函数来实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样，修改原数组中的元素时，新数组中的元素不会改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samesums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">deepCopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> samesums<span class="token punctuation">)</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samesums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre>\n<h2 id="%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数<a class="anchor" href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">§</a></h2>\n<p>JavaScript提供了用来访问数组元素的函数，叫做<strong>存取函数</strong>,这些函数返回目标数组的某种变体。</p>\n<h3 id="%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素<a class="anchor" href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">§</a></h3>\n<p>indexOf( )：用来查找传入的参数在目标数组中是否存在。存在返回索引，不存在返回-1。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Lily\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Bob\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Faker\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n</code></pre>\n<p>如果数组中包含多个相同的元素，indexOf( )函数总是返回第一个元素的索引；lastIndexOf( )则返回最后一个元素的索引。</p>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">§</a></h3>\n<p>join( )和toString( )方法可以将数组转化为字符串，数组各元素之间用逗号隔开。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'World\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token comment">// join()方法可以传入替换默认逗号的字符</span>\n<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello-World</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组<a class="anchor" href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">§</a></h3>\n<p>concat()：合并多个数组创建一个新数组\n工作原理：发起者是一个数组，参数是另一个数组。作为参数的数组中的所有元素都被连接到发起者元素的后边</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<p>splice()：截取一个数组的子集创建一个新数组\n工作原理：第一个参数是截取的起始索引，第二个参数是截取的长度</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<h2 id="%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数<a class="anchor" href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">§</a></h2>\n<p>通过可变函数，可以不必引用数组中的某个元素，就能改变数组的内容。</p>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">§</a></h3>\n<p>push()：将一个元素添加到数组末尾</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n\n<span class="token comment">// 也可使用数组的length属性为数组添加元素</span>\nnums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>unshift()：将一个元素添加到数组开头</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 如果不用数组提供的可变函数，则新元素添加进来后，需要把每个元素都相应地后移一个位置</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnums<span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\n\n<span class="token comment">// 随着数组存储的元素越来越多，上述代码会越来越低效，推荐使用unshift()方法</span>\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以一次为数组添加多个元素</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 0, 1, 2]</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>pop()：删除数组末尾的元素\n``js\nlet nums = [1, 2, 3];\nnums.pop();\nconsole.log(nums); // [1, 2]</p>\n<pre class="language-autoit"><code class="language-autoit">\n如果没有可变函数，从数组中删除第一个元素需要将后续元素各自向前移动一个位置，同样低效\n```js\nlet nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; nums.length; ++i) {</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token comment">; // [2, 3,]</span>\n</code></pre>\n<p>除了要将后续元素前移一位，还多了一个元素，打印数组中的元素时会发现最后多了一个逗号，推荐使用shift()方法</p>\n<p>shift()：删除数组的第一个元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<p>pop()和shift()方法都将删掉的元素作为方法的返回值，因此可以使用一个变量来保存删除的元素</p>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>使用splice()方法为数组添加元素，需提供一下参数：</p>\n<ul>\n<li>起始索引（希望开始添加元素的地方）</li>\n<li>需要删除的元素个数（添加元素时改参数设为0）</li>\n<li>想要添加进数组的元素</li>\n</ul>\n<p>下面的程序在数组中间插入元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<p>下面是使用splice()方法从数组中删除元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>reverse()：将数组中的元素顺序进行反转</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span>\n</code></pre>\n<p>sort()：对数组中的元素进行排序</p>\n<p>如果元素是字符串类型，数组的可变方法sort()就很好用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Mike\'</span><span class="token punctuation">,</span> <span class="token string">\'Bryan\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Bryan\', \'David\', \'Mike\']</span>\n</code></pre>\n<p>但如果数组元素是数字类型，sort()方法的排序结果就不能让人满意了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 100, 2, 200, 3]</span>\n</code></pre>\n<p>sort()方法是按照字典顺序对元素进行排序的，因此它<strong>假定所有元素都是字符串类型</strong>，在上一个例子中，即使元素是数字类型，也被认为是字符串类型。为了让sort()方法也能排序数字类型的元素，可以在调用方法时传入一个大小比较函数，排序时，sort()方法将会根据该函数比较数组中的两个元素的大小，从而决定整个数组的排序。</p>\n<p>对于数字类型，该函数可以是一个简单的相减操作，从一个数字中减去另一个数字。如果结果为负，那么被减数小于减数；如果结果为0，那么被减数等于减数；如果结果为正，那么被减数大于减数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 100, 200]</span>\n</code></pre>\n<h2 id="%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">迭代器方法<a class="anchor" href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">§</a></h2>\n<p>最后一组方法时<strong>迭代器</strong>方法。这些方法对数组中的每个元素应用一个函数，可以返回一个值、一组值或者一个新数组</p>\n<h3 id="%E4%B8%8D%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%96%B9%E6%B3%95">不生成新数组的迭代器方方法<a class="anchor" href="#%E4%B8%8D%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%96%B9%E6%B3%95">§</a></h3>\n<p>此组迭代器方法不产生任何新数组，相反，它们要么对数组中的每个元素执行某种操作，要么返回一个值。</p>\n<p>forEach()：该方法接受一个函数作为参数，对数组中的每个元素使用该函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 1 1</span>\n<span class="token comment">// 2 4</span>\n<span class="token comment">// 3 9</span>\n</code></pre>\n<p>every()：该方法接受一个返回值为布尔类型的函数，对数组中的每个元素使用该函数。如果对于所有的元素，该函数均返回true， 则该方法返回true。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token method function property-access">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n<p>some()：该方法也接受一个返回值为布尔类型的函数，只要有一个元素使得该函数返回值为true，该方法就返回true</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> even2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token method function property-access">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>even2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n<p>reduce()：该方法接受一个函数，返回一个值。该方法会从一个累加值开始，不断对累加值和数组中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值。下面的例子展示了如何使用reduce()方法为数组中的元素求和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">runningTotal<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> runningTotal <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n\n<span class="token comment">// 执行过程如下</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span>\n</code></pre>\n<p>reduce()方法也可用来将数组中的元素连接成一个长的字符串：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">accumulatedString<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'the \'</span><span class="token punctuation">,</span> <span class="token string">\'quick \'</span><span class="token punctuation">,</span> <span class="token string">\'brown \'</span><span class="token punctuation">,</span> <span class="token string">\'fox \'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "the quick brown fox "</span>\n</code></pre>\n<p>JavaScript还提供了reduceRight()方法，和reduce()方法不同，它是从右到左执行。下面的程序使用reduceRight()方法将数组中的元素进行翻转：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">accumulatedString<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'the \'</span><span class="token punctuation">,</span> <span class="token string">\'quick \'</span><span class="token punctuation">,</span> <span class="token string">\'brown \'</span><span class="token punctuation">,</span> <span class="token string">\'fox \'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">reduceRight</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "fox brown quick the "</span>\n</code></pre>\n<h3 id="%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">生成新数组的迭代器方法<a class="anchor" href="#%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">§</a></h3>\n<p>map()：该方法接收一个函数，对数组中的每个元素使用此函数。与forEach()方法不同的是，map()方法返回一个新的数组，该数组的元素是对原有元素应用此函数得到的结果。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curve</span><span class="token punctuation">(</span><span class="token parameter">grade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> grade <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newgrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span>curve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newgrades<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [6, 7, 8]</span>\n</code></pre>\n<p>下面是对字符串数组使用map()方法的例子：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'for\'</span><span class="token punctuation">,</span> <span class="token string">\'you\'</span><span class="token punctuation">,</span> <span class="token string">\'me\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> acronym <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>acronym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'f\', \'y\', \'m\']</span>\n</code></pre>\n<p>filter()：和every()方法类似，传入一个返回值为布尔类型的函数。和every()方法不同的是，当对数组中的所有元素应用该函数，结果均为true，该方法并不返回true，而是返回一个新数组，该数组包含应用该函数后结果为true的元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> evens <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>evens<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4, 6, 8, 10 ]</span>\n<span class="token keyword">let</span> odds <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>odds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 3, 5, 7, 9 ]</span>\n</code></pre>\n<p>一个有趣案例：筛选由随机数生成的数组中大于等于60的元素数组</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">passing</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> num <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">floor</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> passGrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>passing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grades<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>passGrades<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>案例：用filter()方法过滤字符串数组。下例过滤了不包含\'cie\'的单词：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">afterc</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'cie\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'recieve\'</span><span class="token punctuation">,</span> <span class="token string">\'deceive\'</span><span class="token punctuation">,</span> <span class="token string">\'percieve\'</span><span class="token punctuation">,</span> <span class="token string">\'deceit\'</span><span class="token punctuation">,</span> <span class="token string">\'concieve\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newWords <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span>afterc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newWords<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'recieve\', \'percieve\', \'concieve\' ]</span>\n</code></pre>\n<h2 id="%E4%BA%8C%E7%BB%B4%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">二维和多维数组<a class="anchor" href="#%E4%BA%8C%E7%BB%B4%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript只支持一维数组，但是通过在数组里面保存数组元素的方式，可以轻松创建多维数组。</p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">创建二维数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">§</a></h3>\n<p>二维数组类似一种由行和列构成的数据表格。在JavaScript中创建二维数组，需要先创建一个数组，然后让数组的每个元素也是一个数组。最起码，我们需要知道二维数组要包含多少行，有了这个信息，就可以创建一个n行1列的二维数组了：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> twod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> rows <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    twod<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>twod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [], [], [], [], [] ]</span>\n</code></pre>\n<p>这样做的问题是， 数组中的每个元素都是 undefined。更好的方式是遵照 JavaScript: The\nGood Parts（O’Reilly） 一书第 64 页的例子， Crockford 通过扩展 JavaScript 数组对象， 为\n其增加了一个新方法， 该方法根据传入的参数， 设定了数组的行数、 列数和初始值。 下面\n是这个方法的定义:</p>\n<pre class="language-js"><code class="language-js"><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">matrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">numrows<span class="token punctuation">,</span> numcols<span class="token punctuation">,</span> initial</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numrows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numcols<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            columns<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> initial<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> columns<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword control-flow">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>下面是测试该方法的一些测试代码：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">matrix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n\n<span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">matrix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'Joe\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Joe</span>\n</code></pre>\n<p>还可以仅用一行代码就创建并且使用一组初始值来初始化一个二维数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grades<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>\n</code></pre>\n<p>对于小规模数据，这是创建二维数组最简单的方式。</p>\n<h3 id="%E5%A4%84%E7%90%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0">处理二维数组的元素<a class="anchor" href="#%E5%A4%84%E7%90%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0">§</a></h3>\n<p>处理二维数组中的元素，有两种最基本的方式：按列访问和按行访问。</p>\n<p>对于两种方式，我们均使用一组嵌入式的for循环。</p>\n<p>对于按列访问，外层循环对应行，内层循环对应列。以数组 grades 为例， 每一行对应一个学生的成绩记录。 我们可以将该学生的所有成绩相加， 然后除以科目数得到该学生的平均成绩。 下面的代码展示了这一过程：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Student \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\' average: \'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Student 1 average: 81.33</span>\n<span class="token comment">// Student 2 average: 79.67</span>\n<span class="token comment">// Student 3 average: 91.33</span>\n</code></pre>\n<p>对于按行访问，只需要调整for循环的顺序，使外层循环对应列，内层循环对应行即可。下面的程序计算了一个学生各科的平均成绩:</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Test \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\' average: \'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token method function property-access">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Test 1 average: 85.33</span>\n<span class="token comment">// Test 2 average: 84.33</span>\n<span class="token comment">// Test 3 average: 82.67</span>\n</code></pre>\n<h3 id="%E5%8F%82%E5%B7%AE%E4%B8%8D%E9%BD%90%E7%9A%84%E6%95%B0%E7%BB%84">参差不齐的数组<a class="anchor" href="#%E5%8F%82%E5%B7%AE%E4%B8%8D%E9%BD%90%E7%9A%84%E6%95%B0%E7%BB%84">§</a></h3>\n<p>参差不齐的数组是指数组中每行的元素个数彼此不同。 有一行可能包含三个元素， 另一行\n可能包含五个元素， 有些行甚至只包含一个元素。</p>\n<h2 id="%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84">对象数组<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84">§</a></h2>\n<p>数组还可以包含对象， 数组的方法和属性对对象依然适用。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Point</span></span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">y</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">displayPts</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">+</span> <span class="token string">\',\'</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Point \'</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">x</span> <span class="token operator">+</span> <span class="token string">\',\'</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npoints<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'After push: \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npoints<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'After shift: \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Point 1:1,2</span>\n<span class="token comment">// Point 2:3,4</span>\n<span class="token comment">// After push: </span>\n<span class="token comment">// 1,2</span>\n<span class="token comment">// 3,4</span>\n<span class="token comment">// 5,6</span>\n<span class="token comment">// After shift: </span>\n<span class="token comment">// 3,4</span>\n<span class="token comment">// 5,6</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">对象中的数组<a class="anchor" href="#%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">§</a></h3>\n<p>在对象中，可以使用数组存储复杂的数据。下例中， 我们创建了一个对象， 用于保存观测\n到的周最高气温。 该对象有两个方法， 一个方法用来增加一条新的气温记录， 另外一个方\n法用来计算存储在对象中的平均气温。 代码如下所示：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">add</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">average</span> <span class="token operator">=</span> average<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">dataStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> thisWeek <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthisWeek<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>thisWeek<span class="token punctuation">.</span><span class="token method function property-access">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n</code></pre>\n<h2 id="%E7%BB%83%E4%B9%A0">练习<a class="anchor" href="#%E7%BB%83%E4%B9%A0">§</a></h2>\n<ol>\n<li>创建一个记录学生成绩的对象， 提供一个添加成绩的方法， 以及一个显示学生平均成绩的方法。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> grade <span class="token operator">=</span> <span class="token punctuation">{</span>\n    gradeStore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    add<span class="token operator">:</span> add<span class="token punctuation">,</span>\n    average<span class="token operator">:</span> average\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">score</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        total <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">gradeStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngrade<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>grade<span class="token punctuation">.</span><span class="token method function property-access">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n</code></pre>\n<ol start="2">\n<li>将一组单词存储在一个数组中， 并按正序和倒序分别显示这些单词。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Aliy\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Brown\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Aliy\', \'Bob\', \'Brown\', \'David\' ]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'David\', \'Brown\', \'Bob\', \'Aliy\' ]</span>\n</code></pre>\n<ol start="4">\n<li>创建这样一个对象， 它将字母存储在一个数组中， 并且用一个方法可以将字母连在一起， 显示成一个单词。</li>\n</ol>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Words</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">add</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">toWords</span> <span class="token operator">=</span> toWords<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">toWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        temp <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">wordStore</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword control-flow">return</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> myWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Words</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'L\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'O\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'V\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyWord<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">\'E\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>myWord<span class="token punctuation">.</span><span class="token method function property-access">toWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LOVE</span>\n</code></pre>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组</a><ol><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组</a></li><li><a href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组</a></li><li><a href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组</a></li><li><a href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作</a></li></ol></li><li><a href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数</a><ol><li><a href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素</a></li><li><a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示</a></li><li><a href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组</a></li></ol></li><li><a href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数</a><ol><li><a href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素</a></li><li><a href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素</a></li><li><a href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素</a></li><li><a href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序</a></li></ol></li><li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">迭代器方法</a><ol><li><a href="#%E4%B8%8D%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%96%B9%E6%B3%95">不生成新数组的迭代器方方法</a></li><li><a href="#%E7%94%9F%E6%88%90%E6%96%B0%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%96%B9%E6%B3%95">生成新数组的迭代器方法</a></li></ol></li><li><a href="#%E4%BA%8C%E7%BB%B4%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">二维和多维数组</a><ol><li><a href="#%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">创建二维数组</a></li><li><a href="#%E5%A4%84%E7%90%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0">处理二维数组的元素</a></li><li><a href="#%E5%8F%82%E5%B7%AE%E4%B8%8D%E9%BD%90%E7%9A%84%E6%95%B0%E7%BB%84">参差不齐的数组</a></li></ol></li><li><a href="#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84">对象数组</a><ol><li><a href="#%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84">对象中的数组</a></li></ol></li><li><a href="#%E7%BB%83%E4%B9%A0">练习</a></li></ol></nav>'
        } }),
    'author': "jianyun2020",
    'contributors': [
        "jianyun2020"
    ],
    'date': "2021-01-20T05:13:02.000Z",
    'updated': "2021-01-21T06:40:51.000Z",
    'excerpt': "数组 JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可 能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中 的属性名必须是字符串。 数组在 JavaScrip...",
    'cover': undefined,
    'categories': [
        "数据结构与算法"
    ],
    'tags': [
        "JavaScript",
        "数据结构与算法",
        "学习笔记"
    ],
    'blog': {
        "isPost": true,
        "posts": [
            {
                "pagePath": "posts/UE4.md",
                "title": "UE4学习笔记",
                "link": "posts/UE4.html",
                "date": "2021-02-01T04:46:51.000Z",
                "updated": "2021-02-08T03:22:15.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "UE4"
                ],
                "tags": [
                    "UE4",
                    "学习笔记"
                ],
                "excerpt": " 1. 常用快捷键 2. 变更路线节点：Reroute Node 3. Execute Console Command命令 1. 设置分辨率r.setRes 1920x1080 UE4像素流送系统 特点： 1. 流送并非播放预先录制的视频片段，而是播放虚幻引擎实时生成的渲染帧和音频。 2. ...",
                "cover": "images/shortcut_key1.png"
            },
            {
                "pagePath": "posts/React笔记.md",
                "title": "React学习笔记",
                "link": "posts/React笔记.html",
                "date": "2021-01-29T14:58:22.000Z",
                "updated": "2021-02-09T02:13:29.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "React",
                    "学习笔记"
                ],
                "excerpt": " 1. 在html中简易使用jsx语法时，需要引入babel插件，同时设置<script type=\"text/babel\"></script> 2. js语法创建虚拟DOM：React.createElement('h1', {id: 'test'}, 'Hello, React') 3. 关于虚拟DOM： 1. 本质就是Object类型...",
                "cover": "images/lifeold.png"
            },
            {
                "pagePath": "posts/2021-1-29.md",
                "title": "每日总结",
                "link": "posts/2021-1-29.html",
                "date": "2021-01-29T11:38:40.000Z",
                "updated": "2021-01-31T15:15:06.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "每日总结"
                ],
                "tags": [
                    "每日总结"
                ],
                "excerpt": "周末时间利用"
            },
            {
                "pagePath": "posts/前端基础面试题.md",
                "title": "HTML篇",
                "link": "posts/前端基础面试题.html",
                "date": "2021-01-27T07:14:50.000Z",
                "updated": "2021-02-01T04:46:51.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "HTML",
                    "CSS",
                    "JavaScript"
                ],
                "excerpt": "说说title和alt属性 HTML5有哪些新特性、移除了哪些元素 iframe有那些缺点？ HTML W3C的标准 Doctype作用? 严格模式与混杂模式如何区分？它们有何意义? HTML全局属性(global attribute)有哪些 viewport的content属性作用 div+c..."
            },
            {
                "pagePath": "posts/前端本地存储.md",
                "title": "前端本地存储",
                "link": "posts/前端本地存储.html",
                "date": "2021-01-27T03:51:39.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "前端本地存储"
                ],
                "excerpt": "cookie 作用 cookie是纯文本，没有可执行代码。存储数据，当用户访问了某个网站（网页）的时候，我们就可以通过cookie来向访问者电脑上存储数据，或者某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（..."
            },
            {
                "pagePath": "posts/跨域及常见解决办法.md",
                "title": "跨域及常见解决方法",
                "link": "posts/跨域及常见解决办法.html",
                "date": "2021-01-26T10:06:49.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "跨域"
                ],
                "excerpt": "什么是跨域 跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 广义的跨域： 1. 资源跳转：A链接、重定向、表单提交 2. 资源嵌入：<link>、<script>、<img>、<frame>等dom标签，还有样式中backgrou..."
            },
            {
                "pagePath": "posts/垃圾回收机制.md",
                "title": "垃圾回收机制",
                "link": "posts/垃圾回收机制.html",
                "date": "2021-01-26T03:09:41.000Z",
                "updated": "2021-01-26T06:08:48.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "学习笔记",
                    "垃圾回收机制"
                ],
                "excerpt": "JavaScript具有自动垃圾收集机制(GC:GarbageCollection)，也就是说，执行环境会负责管理代码执行过程中使用的内存。开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。 内存生命周期 JS环...",
                "cover": "./images/markandsweep.png"
            },
            {
                "pagePath": "posts/防抖和节流.md",
                "title": "防抖和节流",
                "link": "posts/防抖和节流.html",
                "date": "2021-01-25T10:51:54.000Z",
                "updated": "2021-01-26T03:09:41.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "面试"
                ],
                "tags": [
                    "面试",
                    "防抖和节流",
                    "学习笔记"
                ],
                "excerpt": " - 相同：在不影响客户体验的前提下，将频繁的回调函数，进行次数缩减，避免大量计算导致页的页面卡顿。 - 不同：防抖是将多次执行变为最后一次执行，节流是将多次执行变为在规定时间内只执行一次。 防抖 定义：指触发事件后在..."
            },
            {
                "pagePath": "posts/css_渐变.md",
                "title": "CSS渐变",
                "link": "posts/css_渐变.html",
                "date": "2021-01-25T09:32:57.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "CSS"
                ],
                "tags": [
                    "CSS",
                    "学习笔记",
                    "渐变"
                ],
                "excerpt": "CSS渐变<image>类型的一种特殊类型<gradient>表示，由两种或多种颜色之间的渐进过渡组成。有三种类型的渐变： - 线性（由linear-gradient()函数创建） - 径向（由radial-gradient()函数创建） - 圆锥（由conic-gradient()函数创...",
                "cover": "./images/deg.png"
            },
            {
                "pagePath": "posts/Hook.md",
                "title": "Hook",
                "link": "posts/Hook.html",
                "date": "2021-01-25T07:07:55.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "16.8版本新增特性。可以在不编写class的情况下使用state以及其它的React特性。 import React, { useState } from 'react'; function Example() { // 声明一个新的叫做“count”的state变量 const [count, setCount] = useState..."
            },
            {
                "pagePath": "posts/css_background.md",
                "title": "CSS的background属性详解",
                "link": "posts/css_background.html",
                "date": "2021-01-25T07:07:55.000Z",
                "updated": "2021-01-25T08:30:22.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "CSS"
                ],
                "tags": [
                    "CSS",
                    "学习笔记",
                    "background"
                ],
                "excerpt": "background是一中CSS简写属性，可以在一次声明中定义一个或多个属性：background-clip、background-color、background-image、background-origin、background-position、background-repeat、background-size、background-attac..."
            },
            {
                "pagePath": "posts/List.md",
                "title": "数据结构与算法JavaScript-列表",
                "link": "posts/List.html",
                "date": "2021-01-22T08:08:14.000Z",
                "updated": "2021-01-25T02:27:19.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "数据结构与算法"
                ],
                "tags": [
                    "JavaScript",
                    "数据结构与算法",
                    "学习笔记"
                ],
                "excerpt": "列表的抽象数据类型定义 方法和方法 说明 listSize(属性) 列表的元素个数 pos(属性) 列表的当前位置 length(属性) 返回列表中元素的个数 clear(方法) 清空列表中的所有元素 toString(方法) 返回列表的字符串形式 getElement(方..."
            },
            {
                "pagePath": "posts/元素渲染.md",
                "title": "React-元素渲染",
                "link": "posts/元素渲染.html",
                "date": "2021-01-22T08:08:14.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "元素是构成React应用的最小砖块，其描述了你在屏幕上想看到的内容。 const element = <h1>Hello, World</h1>; 与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一..."
            },
            {
                "pagePath": "posts/JSX简介.md",
                "title": "React-JSX简介",
                "link": "posts/JSX简介.html",
                "date": "2021-01-21T07:25:11.000Z",
                "updated": null,
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "React"
                ],
                "tags": [
                    "JavaScript",
                    "学习笔记",
                    "React"
                ],
                "excerpt": "考虑如下变量声明： const element = <h1>Hello, world!</h1>; 这个有趣的标签语法既不是字符串也不是 HTML。它被称为 JSX，是一个 JavaScript 的语法扩展。 在JSX中嵌入表达式 const name = 'Bob'; const element = <h1>Hello..."
            },
            {
                "pagePath": "posts/Array.md",
                "title": "数据结构与算法JavaScript-数组",
                "link": "posts/Array.html",
                "date": "2021-01-20T05:13:02.000Z",
                "updated": "2021-01-21T06:40:51.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "数据结构与算法"
                ],
                "tags": [
                    "JavaScript",
                    "数据结构与算法",
                    "学习笔记"
                ],
                "excerpt": "数组 JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可 能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中 的属性名必须是字符串。 数组在 JavaScrip..."
            }
        ],
        "categories": [
            {
                "name": "面试",
                "count": 5
            },
            {
                "name": "React",
                "count": 4
            },
            {
                "name": "CSS",
                "count": 2
            },
            {
                "name": "数据结构与算法",
                "count": 2
            },
            {
                "name": "UE4",
                "count": 1
            },
            {
                "name": "每日总结",
                "count": 1
            }
        ],
        "tags": [
            {
                "name": "学习笔记",
                "count": 13
            },
            {
                "name": "JavaScript",
                "count": 6
            },
            {
                "name": "面试",
                "count": 5
            },
            {
                "name": "React",
                "count": 4
            },
            {
                "name": "CSS",
                "count": 3
            },
            {
                "name": "数据结构与算法",
                "count": 2
            },
            {
                "name": "background",
                "count": 1
            },
            {
                "name": "HTML",
                "count": 1
            },
            {
                "name": "UE4",
                "count": 1
            },
            {
                "name": "前端本地存储",
                "count": 1
            },
            {
                "name": "垃圾回收机制",
                "count": 1
            },
            {
                "name": "每日总结",
                "count": 1
            },
            {
                "name": "渐变",
                "count": 1
            },
            {
                "name": "跨域",
                "count": 1
            },
            {
                "name": "防抖和节流",
                "count": 1
            }
        ]
    }
};
