import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "posts/Array.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/Array.html",
    'title': "数据结构与算法JavaScript-数组",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>数据结构与算法JavaScript-数组</h1>\n<h2 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可\n能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中\n的属性名必须是字符串。 数组在 JavaScript 中只是一种特殊的对象， 所以效率上不如其他\n语言中的数组高。\nJavaScript 中的数组， 严格来说应该称作对象， 是特殊的 JavaScript 对象， 在内部被归类为数\n组。 由于 Array 在 JavaScript 中被当作对象， 因此它有许多属性和方法可以在编程时使用。</p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">§</a></h2>\n<h3 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">§</a></h3>\n<p>两种方式：</p>\n<ul>\n<li>通过[ ]操作符（推荐）</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示4</span>\n</code></pre>\n<ul>\n<li>通过Array的构造函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示3</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr3.length显示10</span>\n</code></pre>\n<p><em>特性：脚本语言中的元素不必是同一种数据类型。</em></p>\n<p>可通过Array.isArray()来判断一个对象是否是数组。</p>\n<h3 id="%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组<a class="anchor" href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">§</a></h3>\n<p>求数组中元素的和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 53</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组<a class="anchor" href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">§</a></h3>\n<p>通过字符串对象的split()方法也可以生成数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> setence <span class="token operator">=</span> <span class="token string">"Hello Array"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> setence<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过空格分割</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Hello\', \'Array\' ]</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作<a class="anchor" href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h3>\n<p>将一个数组赋值给另一个数组：此时，只是为被赋值的数组增加了一个新的引用，当修改原数组中的值时，被赋值数组中的值也跟着改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>这种行为被称为<strong>浅复制</strong>，更好的方案是使用<strong>深复制</strong>，将原数组中的每一个元素都赋值一份到新数组中。可以写一个深复制函数来实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样，修改原数组中的元素时，新数组中的元素不会改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samesums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">deepCopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> samesums<span class="token punctuation">)</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samesums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre>\n<h2 id="%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数<a class="anchor" href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">§</a></h2>\n<p>JavaScript提供了用来访问数组元素的函数，叫做<strong>存取函数</strong>,这些函数返回目标数组的某种变体。</p>\n<h3 id="%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素<a class="anchor" href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">§</a></h3>\n<p>indexOf( )：用来查找传入的参数在目标数组中是否存在。存在返回索引，不存在返回-1。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Lily\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Bob\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Faker\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n</code></pre>\n<p>如果数组中包含多个相同的元素，indexOf( )函数总是返回第一个元素的索引；lastIndexOf( )则返回最后一个元素的索引。</p>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">§</a></h3>\n<p>join( )和toString( )方法可以将数组转化为字符串，数组各元素之间用逗号隔开。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'World\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token comment">// join()方法可以传入替换默认逗号的字符</span>\n<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello-World</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组<a class="anchor" href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">§</a></h3>\n<p>concat()：合并多个数组创建一个新数组\n工作原理：发起者是一个数组，参数是另一个数组。作为参数的数组中的所有元素都被连接到发起者元素的后边</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<p>splice()：截取一个数组的子集创建一个新数组\n工作原理：第一个参数是截取的起始索引，第二个参数是截取的长度</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<h2 id="%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数<a class="anchor" href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">§</a></h2>\n<p>通过可变函数，可以不必引用数组中的某个元素，就能改变数组的内容。</p>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">§</a></h3>\n<p>push()：将一个元素添加到数组末尾</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n\n<span class="token comment">// 也可使用数组的length属性为数组添加元素</span>\nnums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>unshift()：将一个元素添加到数组开头</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 如果不用数组提供的可变函数，则新元素添加进来后，需要把每个元素都相应地后移一个位置</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnums<span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\n\n<span class="token comment">// 随着数组存储的元素越来越多，上述代码会越来越低效，推荐使用unshift()方法</span>\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以一次为数组添加多个元素</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 0, 1, 2]</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>pop()：删除数组末尾的元素\n``js\nlet nums = [1, 2, 3];\nnums.pop();\nconsole.log(nums); // [1, 2]</p>\n<pre class="language-autoit"><code class="language-autoit">\n如果没有可变函数，从数组中删除第一个元素需要将后续元素各自向前移动一个位置，同样低效\n```js\nlet nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; nums.length; ++i) {</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token comment">; // [2, 3,]</span>\n</code></pre>\n<p>除了要将后续元素前移一位，还多了一个元素，打印数组中的元素时会发现最后多了一个逗号，推荐使用shift()方法</p>\n<p>shift()：删除数组的第一个元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<p>pop()和shift()方法都将删掉的元素作为方法的返回值，因此可以使用一个变量来保存删除的元素</p>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>使用splice()方法为数组添加元素，需提供一下参数：</p>\n<ul>\n<li>起始索引（希望开始添加元素的地方）</li>\n<li>需要删除的元素个数（添加元素时改参数设为0）</li>\n<li>想要添加进数组的元素</li>\n</ul>\n<p>下面的程序在数组中间插入元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<p>下面是使用splice()方法从数组中删除元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>reverse()：将数组中的元素顺序进行反转</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span>\n</code></pre>\n<p>sort()：对数组中的元素进行排序</p>\n<p>如果元素是字符串类型，数组的可变方法sort()就很好用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Mike\'</span><span class="token punctuation">,</span> <span class="token string">\'Bryan\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Bryan\', \'David\', \'Mike\']</span>\n</code></pre>\n<p>但如果数组元素是数字类型，sort()方法的排序结果就不能让人满意了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 100, 2, 200, 3]</span>\n</code></pre>\n<p>sort()方法是按照字典顺序对元素进行排序的，因此它<strong>假定所有元素都是字符串类型</strong>，在上一个例子中，即使元素是数字类型，也被认为是字符串类型。为了让sort()方法也能排序数字类型的元素，可以在调用方法时传入一个大小比较函数，排序时</p>'
        } }),
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5JavaScript-\u6570\u7EC4"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%95%B0%E7%BB%84">数组<a class="anchor" href="#%E6%95%B0%E7%BB%84">§</a></h2>\n<p>JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可\n能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中\n的属性名必须是字符串。 数组在 JavaScript 中只是一种特殊的对象， 所以效率上不如其他\n语言中的数组高。\nJavaScript 中的数组， 严格来说应该称作对象， 是特殊的 JavaScript 对象， 在内部被归类为数\n组。 由于 Array 在 JavaScript 中被当作对象， 因此它有许多属性和方法可以在编程时使用。</p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">§</a></h2>\n<h3 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">§</a></h3>\n<p>两种方式：</p>\n<ul>\n<li>通过[ ]操作符（推荐）</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示4</span>\n</code></pre>\n<ul>\n<li>通过Array的构造函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1.length显示0</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr2.length显示3</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">.</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr3.length显示10</span>\n</code></pre>\n<p><em>特性：脚本语言中的元素不必是同一种数据类型。</em></p>\n<p>可通过Array.isArray()来判断一个对象是否是数组。</p>\n<h3 id="%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组<a class="anchor" href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">§</a></h3>\n<p>求数组中元素的和：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 53</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组<a class="anchor" href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">§</a></h3>\n<p>通过字符串对象的split()方法也可以生成数组：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> setence <span class="token operator">=</span> <span class="token string">"Hello Array"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> setence<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过空格分割</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'Hello\', \'Array\' ]</span>\n</code></pre>\n<h3 id="%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作<a class="anchor" href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">§</a></h3>\n<p>将一个数组赋值给另一个数组：此时，只是为被赋值的数组增加了一个新的引用，当修改原数组中的值时，被赋值数组中的值也跟着改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre>\n<p>这种行为被称为<strong>浅复制</strong>，更好的方案是使用<strong>深复制</strong>，将原数组中的每一个元素都赋值一份到新数组中。可以写一个深复制函数来实现：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这样，修改原数组中的元素时，新数组中的元素不会改变。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> samesums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">deepCopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> samesums<span class="token punctuation">)</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>samesums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre>\n<h2 id="%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数<a class="anchor" href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">§</a></h2>\n<p>JavaScript提供了用来访问数组元素的函数，叫做<strong>存取函数</strong>,这些函数返回目标数组的某种变体。</p>\n<h3 id="%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素<a class="anchor" href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">§</a></h3>\n<p>indexOf( )：用来查找传入的参数在目标数组中是否存在。存在返回索引，不存在返回-1。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Bob\'</span><span class="token punctuation">,</span> <span class="token string">\'Lily\'</span><span class="token punctuation">,</span> <span class="token string">\'David\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Bob\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">\'Faker\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n</code></pre>\n<p>如果数组中包含多个相同的元素，indexOf( )函数总是返回第一个元素的索引；lastIndexOf( )则返回最后一个元素的索引。</p>\n<h3 id="%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示<a class="anchor" href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">§</a></h3>\n<p>join( )和toString( )方法可以将数组转化为字符串，数组各元素之间用逗号隔开。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'World\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, World</span>\n<span class="token comment">// join()方法可以传入替换默认逗号的字符</span>\n<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello-World</span>\n</code></pre>\n<h3 id="%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组<a class="anchor" href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">§</a></h3>\n<p>concat()：合并多个数组创建一个新数组\n工作原理：发起者是一个数组，参数是另一个数组。作为参数的数组中的所有元素都被连接到发起者元素的后边</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<p>splice()：截取一个数组的子集创建一个新数组\n工作原理：第一个参数是截取的起始索引，第二个参数是截取的长度</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<h2 id="%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数<a class="anchor" href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">§</a></h2>\n<p>通过可变函数，可以不必引用数组中的某个元素，就能改变数组的内容。</p>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">§</a></h3>\n<p>push()：将一个元素添加到数组末尾</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n\n<span class="token comment">// 也可使用数组的length属性为数组添加元素</span>\nnums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p>unshift()：将一个元素添加到数组开头</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 如果不用数组提供的可变函数，则新元素添加进来后，需要把每个元素都相应地后移一个位置</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nnums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnums<span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\n\n<span class="token comment">// 随着数组存储的元素越来越多，上述代码会越来越低效，推荐使用unshift()方法</span>\n<span class="token keyword">let</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> newnums2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span>\nnums2<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newnums2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以一次为数组添加多个元素</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 0, 1, 2]</span>\n</code></pre>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>pop()：删除数组末尾的元素\n``js\nlet nums = [1, 2, 3];\nnums.pop();\nconsole.log(nums); // [1, 2]</p>\n<pre class="language-autoit"><code class="language-autoit">\n如果没有可变函数，从数组中删除第一个元素需要将后续元素各自向前移动一个位置，同样低效\n```js\nlet nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">; i &lt; nums.length; ++i) {</span>\n    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">;</span>\n}\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token comment">; // [2, 3,]</span>\n</code></pre>\n<p>除了要将后续元素前移一位，还多了一个元素，打印数组中的元素时会发现最后多了一个逗号，推荐使用shift()方法</p>\n<p>shift()：删除数组的第一个元素</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>\n</code></pre>\n<p>pop()和shift()方法都将删掉的元素作为方法的返回值，因此可以使用一个变量来保存删除的元素</p>\n<h3 id="%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素<a class="anchor" href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">§</a></h3>\n<p>使用splice()方法为数组添加元素，需提供一下参数：</p>\n<ul>\n<li>起始索引（希望开始添加元素的地方）</li>\n<li>需要删除的元素个数（添加元素时改参数设为0）</li>\n<li>想要添加进数组的元素</li>\n</ul>\n<p>下面的程序在数组中间插入元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<p>下面是使用splice()方法从数组中删除元素：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre>\n<h3 id="%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序<a class="anchor" href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">§</a></h3>\n<p>reverse()：将数组中的元素顺序进行反转</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span>\n</code></pre>\n<p>sort()：对数组中的元素进行排序</p>\n<p>如果元素是字符串类型，数组的可变方法sort()就很好用</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> names <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'David\'</span><span class="token punctuation">,</span> <span class="token string">\'Mike\'</span><span class="token punctuation">,</span> <span class="token string">\'Bryan\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnames<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Bryan\', \'David\', \'Mike\']</span>\n</code></pre>\n<p>但如果数组元素是数字类型，sort()方法的排序结果就不能让人满意了</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnums<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 100, 2, 200, 3]</span>\n</code></pre>\n<p>sort()方法是按照字典顺序对元素进行排序的，因此它<strong>假定所有元素都是字符串类型</strong>，在上一个例子中，即使元素是数字类型，也被认为是字符串类型。为了让sort()方法也能排序数字类型的元素，可以在调用方法时传入一个大小比较函数，排序时</p>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84">使用数组</a><ol><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84">创建数组</a></li><li><a href="#%E8%AF%BB%E5%86%99%E6%95%B0%E7%BB%84">读写数组</a></li><li><a href="#%E7%94%B1%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84">由字符串生成数组</a></li><li><a href="#%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E6%93%8D%E4%BD%9C">对数组的整体性操作</a></li></ol></li><li><a href="#%E5%AD%98%E5%8F%96%E5%87%BD%E6%95%B0">存取函数</a><ol><li><a href="#%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">查找元素</a></li><li><a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA">数组的字符串表示</a></li><li><a href="#%E7%94%B1%E5%B7%B2%E6%9C%89%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84">由已有数组创建新数组</a></li></ol></li><li><a href="#%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0">可变函数</a><ol><li><a href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">为数组添加元素</a></li><li><a href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中删除元素</a></li><li><a href="#%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%97%B4%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">从数组中间位置添加和删除元素</a></li><li><a href="#%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">为数组排序</a></li></ol></li></ol></nav>'
        } }),
    'author': "jianyun2020",
    'contributors': [
        "jianyun2020"
    ],
    'date': "2021-01-20T05:13:02.000Z",
    'updated': "2021-01-21T03:06:45.000Z",
    'excerpt': "数组 JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可 能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中 的属性名必须是字符串。 数组在 JavaScrip...",
    'cover': undefined,
    'categories': [
        "数据结构与算法"
    ],
    'tags': [
        "JavaScript",
        "数据结构与算法",
        "学习笔记"
    ],
    'blog': {
        "isPost": true,
        "posts": [
            {
                "pagePath": "posts/Array.md",
                "title": "数据结构与算法JavaScript-数组",
                "link": "posts/Array.html",
                "date": "2021-01-20T05:13:02.000Z",
                "updated": "2021-01-21T03:06:45.000Z",
                "author": "jianyun2020",
                "contributors": [
                    "jianyun2020"
                ],
                "categories": [
                    "数据结构与算法"
                ],
                "tags": [
                    "JavaScript",
                    "数据结构与算法",
                    "学习笔记"
                ],
                "excerpt": "数组 JavaScript 中的数组是一种特殊的对象， 用来表示偏移量的索引是该对象的属性， 索引可 能是整数。 然而， 这些数字索引在内部被转换为字符串类型， 这是因为 JavaScript 对象中 的属性名必须是字符串。 数组在 JavaScrip..."
            }
        ],
        "categories": [
            {
                "name": "数据结构与算法",
                "count": 1
            }
        ],
        "tags": [
            {
                "name": "JavaScript",
                "count": 1
            },
            {
                "name": "学习笔记",
                "count": 1
            },
            {
                "name": "数据结构与算法",
                "count": 1
            }
        ]
    }
};
